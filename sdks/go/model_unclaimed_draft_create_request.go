/*
Dropbox Sign API

Dropbox Sign v3 API

API version: 3.0.0
Contact: apisupport@hellosign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dropboxsign

import (
	"encoding/json"
)

// UnclaimedDraftCreateRequest struct for UnclaimedDraftCreateRequest
type UnclaimedDraftCreateRequest struct {
	// The type of unclaimed draft to create. Use `send_document` to create a claimable file, and `request_signature` for a claimable signature request. If the type is `request_signature` then signers name and email_address are not optional.
	Type string `json:"type"`
	// Use `files[]` to indicate the uploaded file(s) to send for signature.  This endpoint requires either **files** or **file_urls[]**, but not both.
	Files *[]*os.File `json:"files,omitempty"`
	// Use `file_urls[]` to have Dropbox Sign download the file(s) to send for signature.  This endpoint requires either **files** or **file_urls[]**, but not both.
	FileUrls *[]string `json:"file_urls,omitempty"`
	// Allows signers to decline to sign a document if `true`. Defaults to `false`.
	AllowDecline *bool `json:"allow_decline,omitempty"`
	// A list describing the attachments
	Attachments *[]SubAttachment `json:"attachments,omitempty"`
	// The email addresses that should be CCed.
	CcEmailAddresses *[]string `json:"cc_email_addresses,omitempty"`
	// Client id of the app used to create the draft. Used to apply the branding and callback url defined for the app.
	ClientId *string `json:"client_id,omitempty"`
	// When used together with merge fields, `custom_fields` allows users to add pre-filled data to their signature requests.  Pre-filled data can be used with \"send-once\" signature requests by adding merge fields with `form_fields_per_document` or [Text Tags](https://app.hellosign.com/api/textTagsWalkthrough#TextTagIntro) while passing values back with `custom_fields` together in one API call.  For using pre-filled on repeatable signature requests, merge fields are added to templates in the Dropbox Sign UI or by calling [/template/create_embedded_draft](/api/reference/operation/templateCreateEmbeddedDraft) and then passing `custom_fields` on subsequent signature requests referencing that template.
	CustomFields *[]SubCustomField `json:"custom_fields,omitempty"`
	FieldOptions *SubFieldOptions `json:"field_options,omitempty"`
	// Group information for fields defined in `form_fields_per_document`. String-indexed JSON array with `group_label` and `requirement` keys. `form_fields_per_document` must contain fields referencing a group defined in `form_field_groups`.
	FormFieldGroups *[]SubFormFieldGroup `json:"form_field_groups,omitempty"`
	// Conditional Logic rules for fields defined in `form_fields_per_document`.
	FormFieldRules *[]SubFormFieldRule `json:"form_field_rules,omitempty"`
	// The fields that should appear on the document, expressed as an array of objects. (For more details you can read about it here: [Using Form Fields per Document](/docs/openapi/form-fields-per-document).)  **NOTE**: Fields like **text**, **dropdown**, **checkbox**, **radio**, and **hyperlink** have additional required and optional parameters. Check out the list of [additional parameters](/api/reference/constants/#form-fields-per-document) for these field types.  * Text Field use `SubFormFieldsPerDocumentText` * Dropdown Field use `SubFormFieldsPerDocumentDropdown` * Hyperlink Field use `SubFormFieldsPerDocumentHyperlink` * Checkbox Field use `SubFormFieldsPerDocumentCheckbox` * Radio Field use `SubFormFieldsPerDocumentRadio` * Signature Field use `SubFormFieldsPerDocumentSignature` * Date Signed Field use `SubFormFieldsPerDocumentDateSigned` * Initials Field use `SubFormFieldsPerDocumentInitials` * Text Merge Field use `SubFormFieldsPerDocumentTextMerge` * Checkbox Merge Field use `SubFormFieldsPerDocumentCheckboxMerge`
	FormFieldsPerDocument *[]SubFormFieldsPerDocumentBase `json:"form_fields_per_document,omitempty"`
	// Send with a value of `true` if you wish to enable automatic Text Tag removal. Defaults to `false`. When using Text Tags it is preferred that you set this to `false` and hide your tags with white text or something similar because the automatic removal system can cause unwanted clipping. See the [Text Tags](https://app.hellosign.com/api/textTagsWalkthrough#TextTagIntro) walkthrough for more details.
	HideTextTags *bool `json:"hide_text_tags,omitempty"`
	// The custom message in the email that will be sent to the signers.
	Message *string `json:"message,omitempty"`
	// Key-value data that should be attached to the signature request. This metadata is included in all API responses and events involving the signature request. For example, use the metadata field to store a signer's order number for look up when receiving events for the signature request.  Each request can include up to 10 metadata keys (or 50 nested metadata keys), with key names up to 40 characters long and values up to 1000 characters long.
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
	// When only one step remains in the signature request process and this parameter is set to `false` then the progress stepper will be hidden.
	ShowProgressStepper *bool `json:"show_progress_stepper,omitempty"`
	// Add Signers to your Unclaimed Draft Signature Request.
	Signers *[]SubUnclaimedDraftSigner `json:"signers,omitempty"`
	SigningOptions *SubSigningOptions `json:"signing_options,omitempty"`
	// The URL you want signers redirected to after they successfully sign.
	SigningRedirectUrl *string `json:"signing_redirect_url,omitempty"`
	// The subject in the email that will be sent to the signers.
	Subject *string `json:"subject,omitempty"`
	// Whether this is a test, the signature request created from this draft will not be legally binding if set to `true`. Defaults to `false`.
	TestMode *bool `json:"test_mode,omitempty"`
	// Set `use_text_tags` to `true` to enable [Text Tags](https://app.hellosign.com/api/textTagsWalkthrough#TextTagIntro) parsing in your document (defaults to disabled, or `false`). Alternatively, if your PDF contains pre-defined fields, enable the detection of these fields by setting the `use_preexisting_fields` to `true` (defaults to disabled, or `false`). Currently we only support use of either `use_text_tags` or `use_preexisting_fields` parameter, not both.
	UsePreexistingFields *bool `json:"use_preexisting_fields,omitempty"`
	// Set `use_text_tags` to `true` to enable [Text Tags](https://app.hellosign.com/api/textTagsWalkthrough#TextTagIntro) parsing in your document (defaults to disabled, or `false`). Alternatively, if your PDF contains pre-defined fields, enable the detection of these fields by setting the `use_preexisting_fields` to `true` (defaults to disabled, or `false`). Currently we only support use of either `use_text_tags` or `use_preexisting_fields` parameter, not both.
	UseTextTags *bool `json:"use_text_tags,omitempty"`
	// When the signature request will expire. Unsigned signatures will be moved to the expired status, and no longer signable. See [Signature Request Expiration Date](https://developers.hellosign.com/docs/signature-request/expiration/) for details.  **Note**: This does not correspond to the **expires_at** returned in the response.
	ExpiresAt NullableInt32 `json:"expires_at,omitempty"`
}

// NewUnclaimedDraftCreateRequest instantiates a new UnclaimedDraftCreateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUnclaimedDraftCreateRequest(type_ string) *UnclaimedDraftCreateRequest {
	this := UnclaimedDraftCreateRequest{}
	this.Type = type_
	var allowDecline bool = false
	this.AllowDecline = &allowDecline
	var hideTextTags bool = false
	this.HideTextTags = &hideTextTags
	var showProgressStepper bool = true
	this.ShowProgressStepper = &showProgressStepper
	var testMode bool = false
	this.TestMode = &testMode
	var usePreexistingFields bool = false
	this.UsePreexistingFields = &usePreexistingFields
	var useTextTags bool = false
	this.UseTextTags = &useTextTags
	return &this
}

// NewUnclaimedDraftCreateRequestWithDefaults instantiates a new UnclaimedDraftCreateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUnclaimedDraftCreateRequestWithDefaults() *UnclaimedDraftCreateRequest {
	this := UnclaimedDraftCreateRequest{}
	var allowDecline bool = false
	this.AllowDecline = &allowDecline
	var hideTextTags bool = false
	this.HideTextTags = &hideTextTags
	var showProgressStepper bool = true
	this.ShowProgressStepper = &showProgressStepper
	var testMode bool = false
	this.TestMode = &testMode
	var usePreexistingFields bool = false
	this.UsePreexistingFields = &usePreexistingFields
	var useTextTags bool = false
	this.UseTextTags = &useTextTags
	return &this
}

// GetType returns the Type field value
func (o *UnclaimedDraftCreateRequest) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *UnclaimedDraftCreateRequest) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *UnclaimedDraftCreateRequest) SetType(v string) {
	o.Type = v
}

// GetFiles returns the Files field value if set, zero value otherwise.
func (o *UnclaimedDraftCreateRequest) GetFiles() []*os.File {
	if o == nil || o.Files == nil {
		var ret []*os.File
		return ret
	}
	return *o.Files
}

// GetFilesOk returns a tuple with the Files field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnclaimedDraftCreateRequest) GetFilesOk() (*[]*os.File, bool) {
	if o == nil || o.Files == nil {
		return nil, false
	}
	return o.Files, true
}

// HasFiles returns a boolean if a field has been set.
func (o *UnclaimedDraftCreateRequest) HasFiles() bool {
	if o != nil && o.Files != nil {
		return true
	}

	return false
}

// SetFiles gets a reference to the given []*os.File and assigns it to the Files field.
func (o *UnclaimedDraftCreateRequest) SetFiles(v []*os.File) {
	o.Files = &v
}

// GetFileUrls returns the FileUrls field value if set, zero value otherwise.
func (o *UnclaimedDraftCreateRequest) GetFileUrls() []string {
	if o == nil || o.FileUrls == nil {
		var ret []string
		return ret
	}
	return *o.FileUrls
}

// GetFileUrlsOk returns a tuple with the FileUrls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnclaimedDraftCreateRequest) GetFileUrlsOk() (*[]string, bool) {
	if o == nil || o.FileUrls == nil {
		return nil, false
	}
	return o.FileUrls, true
}

// HasFileUrls returns a boolean if a field has been set.
func (o *UnclaimedDraftCreateRequest) HasFileUrls() bool {
	if o != nil && o.FileUrls != nil {
		return true
	}

	return false
}

// SetFileUrls gets a reference to the given []string and assigns it to the FileUrls field.
func (o *UnclaimedDraftCreateRequest) SetFileUrls(v []string) {
	o.FileUrls = &v
}

// GetAllowDecline returns the AllowDecline field value if set, zero value otherwise.
func (o *UnclaimedDraftCreateRequest) GetAllowDecline() bool {
	if o == nil || o.AllowDecline == nil {
		var ret bool
		return ret
	}
	return *o.AllowDecline
}

// GetAllowDeclineOk returns a tuple with the AllowDecline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnclaimedDraftCreateRequest) GetAllowDeclineOk() (*bool, bool) {
	if o == nil || o.AllowDecline == nil {
		return nil, false
	}
	return o.AllowDecline, true
}

// HasAllowDecline returns a boolean if a field has been set.
func (o *UnclaimedDraftCreateRequest) HasAllowDecline() bool {
	if o != nil && o.AllowDecline != nil {
		return true
	}

	return false
}

// SetAllowDecline gets a reference to the given bool and assigns it to the AllowDecline field.
func (o *UnclaimedDraftCreateRequest) SetAllowDecline(v bool) {
	o.AllowDecline = &v
}

// GetAttachments returns the Attachments field value if set, zero value otherwise.
func (o *UnclaimedDraftCreateRequest) GetAttachments() []SubAttachment {
	if o == nil || o.Attachments == nil {
		var ret []SubAttachment
		return ret
	}
	return *o.Attachments
}

// GetAttachmentsOk returns a tuple with the Attachments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnclaimedDraftCreateRequest) GetAttachmentsOk() (*[]SubAttachment, bool) {
	if o == nil || o.Attachments == nil {
		return nil, false
	}
	return o.Attachments, true
}

// HasAttachments returns a boolean if a field has been set.
func (o *UnclaimedDraftCreateRequest) HasAttachments() bool {
	if o != nil && o.Attachments != nil {
		return true
	}

	return false
}

// SetAttachments gets a reference to the given []SubAttachment and assigns it to the Attachments field.
func (o *UnclaimedDraftCreateRequest) SetAttachments(v []SubAttachment) {
	o.Attachments = &v
}

// GetCcEmailAddresses returns the CcEmailAddresses field value if set, zero value otherwise.
func (o *UnclaimedDraftCreateRequest) GetCcEmailAddresses() []string {
	if o == nil || o.CcEmailAddresses == nil {
		var ret []string
		return ret
	}
	return *o.CcEmailAddresses
}

// GetCcEmailAddressesOk returns a tuple with the CcEmailAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnclaimedDraftCreateRequest) GetCcEmailAddressesOk() (*[]string, bool) {
	if o == nil || o.CcEmailAddresses == nil {
		return nil, false
	}
	return o.CcEmailAddresses, true
}

// HasCcEmailAddresses returns a boolean if a field has been set.
func (o *UnclaimedDraftCreateRequest) HasCcEmailAddresses() bool {
	if o != nil && o.CcEmailAddresses != nil {
		return true
	}

	return false
}

// SetCcEmailAddresses gets a reference to the given []string and assigns it to the CcEmailAddresses field.
func (o *UnclaimedDraftCreateRequest) SetCcEmailAddresses(v []string) {
	o.CcEmailAddresses = &v
}

// GetClientId returns the ClientId field value if set, zero value otherwise.
func (o *UnclaimedDraftCreateRequest) GetClientId() string {
	if o == nil || o.ClientId == nil {
		var ret string
		return ret
	}
	return *o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnclaimedDraftCreateRequest) GetClientIdOk() (*string, bool) {
	if o == nil || o.ClientId == nil {
		return nil, false
	}
	return o.ClientId, true
}

// HasClientId returns a boolean if a field has been set.
func (o *UnclaimedDraftCreateRequest) HasClientId() bool {
	if o != nil && o.ClientId != nil {
		return true
	}

	return false
}

// SetClientId gets a reference to the given string and assigns it to the ClientId field.
func (o *UnclaimedDraftCreateRequest) SetClientId(v string) {
	o.ClientId = &v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise.
func (o *UnclaimedDraftCreateRequest) GetCustomFields() []SubCustomField {
	if o == nil || o.CustomFields == nil {
		var ret []SubCustomField
		return ret
	}
	return *o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnclaimedDraftCreateRequest) GetCustomFieldsOk() (*[]SubCustomField, bool) {
	if o == nil || o.CustomFields == nil {
		return nil, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *UnclaimedDraftCreateRequest) HasCustomFields() bool {
	if o != nil && o.CustomFields != nil {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given []SubCustomField and assigns it to the CustomFields field.
func (o *UnclaimedDraftCreateRequest) SetCustomFields(v []SubCustomField) {
	o.CustomFields = &v
}

// GetFieldOptions returns the FieldOptions field value if set, zero value otherwise.
func (o *UnclaimedDraftCreateRequest) GetFieldOptions() SubFieldOptions {
	if o == nil || o.FieldOptions == nil {
		var ret SubFieldOptions
		return ret
	}
	return *o.FieldOptions
}

// GetFieldOptionsOk returns a tuple with the FieldOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnclaimedDraftCreateRequest) GetFieldOptionsOk() (*SubFieldOptions, bool) {
	if o == nil || o.FieldOptions == nil {
		return nil, false
	}
	return o.FieldOptions, true
}

// HasFieldOptions returns a boolean if a field has been set.
func (o *UnclaimedDraftCreateRequest) HasFieldOptions() bool {
	if o != nil && o.FieldOptions != nil {
		return true
	}

	return false
}

// SetFieldOptions gets a reference to the given SubFieldOptions and assigns it to the FieldOptions field.
func (o *UnclaimedDraftCreateRequest) SetFieldOptions(v SubFieldOptions) {
	o.FieldOptions = &v
}

// GetFormFieldGroups returns the FormFieldGroups field value if set, zero value otherwise.
func (o *UnclaimedDraftCreateRequest) GetFormFieldGroups() []SubFormFieldGroup {
	if o == nil || o.FormFieldGroups == nil {
		var ret []SubFormFieldGroup
		return ret
	}
	return *o.FormFieldGroups
}

// GetFormFieldGroupsOk returns a tuple with the FormFieldGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnclaimedDraftCreateRequest) GetFormFieldGroupsOk() (*[]SubFormFieldGroup, bool) {
	if o == nil || o.FormFieldGroups == nil {
		return nil, false
	}
	return o.FormFieldGroups, true
}

// HasFormFieldGroups returns a boolean if a field has been set.
func (o *UnclaimedDraftCreateRequest) HasFormFieldGroups() bool {
	if o != nil && o.FormFieldGroups != nil {
		return true
	}

	return false
}

// SetFormFieldGroups gets a reference to the given []SubFormFieldGroup and assigns it to the FormFieldGroups field.
func (o *UnclaimedDraftCreateRequest) SetFormFieldGroups(v []SubFormFieldGroup) {
	o.FormFieldGroups = &v
}

// GetFormFieldRules returns the FormFieldRules field value if set, zero value otherwise.
func (o *UnclaimedDraftCreateRequest) GetFormFieldRules() []SubFormFieldRule {
	if o == nil || o.FormFieldRules == nil {
		var ret []SubFormFieldRule
		return ret
	}
	return *o.FormFieldRules
}

// GetFormFieldRulesOk returns a tuple with the FormFieldRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnclaimedDraftCreateRequest) GetFormFieldRulesOk() (*[]SubFormFieldRule, bool) {
	if o == nil || o.FormFieldRules == nil {
		return nil, false
	}
	return o.FormFieldRules, true
}

// HasFormFieldRules returns a boolean if a field has been set.
func (o *UnclaimedDraftCreateRequest) HasFormFieldRules() bool {
	if o != nil && o.FormFieldRules != nil {
		return true
	}

	return false
}

// SetFormFieldRules gets a reference to the given []SubFormFieldRule and assigns it to the FormFieldRules field.
func (o *UnclaimedDraftCreateRequest) SetFormFieldRules(v []SubFormFieldRule) {
	o.FormFieldRules = &v
}

// GetFormFieldsPerDocument returns the FormFieldsPerDocument field value if set, zero value otherwise.
func (o *UnclaimedDraftCreateRequest) GetFormFieldsPerDocument() []SubFormFieldsPerDocumentBase {
	if o == nil || o.FormFieldsPerDocument == nil {
		var ret []SubFormFieldsPerDocumentBase
		return ret
	}
	return *o.FormFieldsPerDocument
}

// GetFormFieldsPerDocumentOk returns a tuple with the FormFieldsPerDocument field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnclaimedDraftCreateRequest) GetFormFieldsPerDocumentOk() (*[]SubFormFieldsPerDocumentBase, bool) {
	if o == nil || o.FormFieldsPerDocument == nil {
		return nil, false
	}
	return o.FormFieldsPerDocument, true
}

// HasFormFieldsPerDocument returns a boolean if a field has been set.
func (o *UnclaimedDraftCreateRequest) HasFormFieldsPerDocument() bool {
	if o != nil && o.FormFieldsPerDocument != nil {
		return true
	}

	return false
}

// SetFormFieldsPerDocument gets a reference to the given []SubFormFieldsPerDocumentBase and assigns it to the FormFieldsPerDocument field.
func (o *UnclaimedDraftCreateRequest) SetFormFieldsPerDocument(v []SubFormFieldsPerDocumentBase) {
	o.FormFieldsPerDocument = &v
}

// GetHideTextTags returns the HideTextTags field value if set, zero value otherwise.
func (o *UnclaimedDraftCreateRequest) GetHideTextTags() bool {
	if o == nil || o.HideTextTags == nil {
		var ret bool
		return ret
	}
	return *o.HideTextTags
}

// GetHideTextTagsOk returns a tuple with the HideTextTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnclaimedDraftCreateRequest) GetHideTextTagsOk() (*bool, bool) {
	if o == nil || o.HideTextTags == nil {
		return nil, false
	}
	return o.HideTextTags, true
}

// HasHideTextTags returns a boolean if a field has been set.
func (o *UnclaimedDraftCreateRequest) HasHideTextTags() bool {
	if o != nil && o.HideTextTags != nil {
		return true
	}

	return false
}

// SetHideTextTags gets a reference to the given bool and assigns it to the HideTextTags field.
func (o *UnclaimedDraftCreateRequest) SetHideTextTags(v bool) {
	o.HideTextTags = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *UnclaimedDraftCreateRequest) GetMessage() string {
	if o == nil || o.Message == nil {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnclaimedDraftCreateRequest) GetMessageOk() (*string, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *UnclaimedDraftCreateRequest) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *UnclaimedDraftCreateRequest) SetMessage(v string) {
	o.Message = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *UnclaimedDraftCreateRequest) GetMetadata() map[string]interface{} {
	if o == nil || o.Metadata == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnclaimedDraftCreateRequest) GetMetadataOk() (*map[string]interface{}, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *UnclaimedDraftCreateRequest) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *UnclaimedDraftCreateRequest) SetMetadata(v map[string]interface{}) {
	o.Metadata = &v
}

// GetShowProgressStepper returns the ShowProgressStepper field value if set, zero value otherwise.
func (o *UnclaimedDraftCreateRequest) GetShowProgressStepper() bool {
	if o == nil || o.ShowProgressStepper == nil {
		var ret bool
		return ret
	}
	return *o.ShowProgressStepper
}

// GetShowProgressStepperOk returns a tuple with the ShowProgressStepper field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnclaimedDraftCreateRequest) GetShowProgressStepperOk() (*bool, bool) {
	if o == nil || o.ShowProgressStepper == nil {
		return nil, false
	}
	return o.ShowProgressStepper, true
}

// HasShowProgressStepper returns a boolean if a field has been set.
func (o *UnclaimedDraftCreateRequest) HasShowProgressStepper() bool {
	if o != nil && o.ShowProgressStepper != nil {
		return true
	}

	return false
}

// SetShowProgressStepper gets a reference to the given bool and assigns it to the ShowProgressStepper field.
func (o *UnclaimedDraftCreateRequest) SetShowProgressStepper(v bool) {
	o.ShowProgressStepper = &v
}

// GetSigners returns the Signers field value if set, zero value otherwise.
func (o *UnclaimedDraftCreateRequest) GetSigners() []SubUnclaimedDraftSigner {
	if o == nil || o.Signers == nil {
		var ret []SubUnclaimedDraftSigner
		return ret
	}
	return *o.Signers
}

// GetSignersOk returns a tuple with the Signers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnclaimedDraftCreateRequest) GetSignersOk() (*[]SubUnclaimedDraftSigner, bool) {
	if o == nil || o.Signers == nil {
		return nil, false
	}
	return o.Signers, true
}

// HasSigners returns a boolean if a field has been set.
func (o *UnclaimedDraftCreateRequest) HasSigners() bool {
	if o != nil && o.Signers != nil {
		return true
	}

	return false
}

// SetSigners gets a reference to the given []SubUnclaimedDraftSigner and assigns it to the Signers field.
func (o *UnclaimedDraftCreateRequest) SetSigners(v []SubUnclaimedDraftSigner) {
	o.Signers = &v
}

// GetSigningOptions returns the SigningOptions field value if set, zero value otherwise.
func (o *UnclaimedDraftCreateRequest) GetSigningOptions() SubSigningOptions {
	if o == nil || o.SigningOptions == nil {
		var ret SubSigningOptions
		return ret
	}
	return *o.SigningOptions
}

// GetSigningOptionsOk returns a tuple with the SigningOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnclaimedDraftCreateRequest) GetSigningOptionsOk() (*SubSigningOptions, bool) {
	if o == nil || o.SigningOptions == nil {
		return nil, false
	}
	return o.SigningOptions, true
}

// HasSigningOptions returns a boolean if a field has been set.
func (o *UnclaimedDraftCreateRequest) HasSigningOptions() bool {
	if o != nil && o.SigningOptions != nil {
		return true
	}

	return false
}

// SetSigningOptions gets a reference to the given SubSigningOptions and assigns it to the SigningOptions field.
func (o *UnclaimedDraftCreateRequest) SetSigningOptions(v SubSigningOptions) {
	o.SigningOptions = &v
}

// GetSigningRedirectUrl returns the SigningRedirectUrl field value if set, zero value otherwise.
func (o *UnclaimedDraftCreateRequest) GetSigningRedirectUrl() string {
	if o == nil || o.SigningRedirectUrl == nil {
		var ret string
		return ret
	}
	return *o.SigningRedirectUrl
}

// GetSigningRedirectUrlOk returns a tuple with the SigningRedirectUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnclaimedDraftCreateRequest) GetSigningRedirectUrlOk() (*string, bool) {
	if o == nil || o.SigningRedirectUrl == nil {
		return nil, false
	}
	return o.SigningRedirectUrl, true
}

// HasSigningRedirectUrl returns a boolean if a field has been set.
func (o *UnclaimedDraftCreateRequest) HasSigningRedirectUrl() bool {
	if o != nil && o.SigningRedirectUrl != nil {
		return true
	}

	return false
}

// SetSigningRedirectUrl gets a reference to the given string and assigns it to the SigningRedirectUrl field.
func (o *UnclaimedDraftCreateRequest) SetSigningRedirectUrl(v string) {
	o.SigningRedirectUrl = &v
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *UnclaimedDraftCreateRequest) GetSubject() string {
	if o == nil || o.Subject == nil {
		var ret string
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnclaimedDraftCreateRequest) GetSubjectOk() (*string, bool) {
	if o == nil || o.Subject == nil {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *UnclaimedDraftCreateRequest) HasSubject() bool {
	if o != nil && o.Subject != nil {
		return true
	}

	return false
}

// SetSubject gets a reference to the given string and assigns it to the Subject field.
func (o *UnclaimedDraftCreateRequest) SetSubject(v string) {
	o.Subject = &v
}

// GetTestMode returns the TestMode field value if set, zero value otherwise.
func (o *UnclaimedDraftCreateRequest) GetTestMode() bool {
	if o == nil || o.TestMode == nil {
		var ret bool
		return ret
	}
	return *o.TestMode
}

// GetTestModeOk returns a tuple with the TestMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnclaimedDraftCreateRequest) GetTestModeOk() (*bool, bool) {
	if o == nil || o.TestMode == nil {
		return nil, false
	}
	return o.TestMode, true
}

// HasTestMode returns a boolean if a field has been set.
func (o *UnclaimedDraftCreateRequest) HasTestMode() bool {
	if o != nil && o.TestMode != nil {
		return true
	}

	return false
}

// SetTestMode gets a reference to the given bool and assigns it to the TestMode field.
func (o *UnclaimedDraftCreateRequest) SetTestMode(v bool) {
	o.TestMode = &v
}

// GetUsePreexistingFields returns the UsePreexistingFields field value if set, zero value otherwise.
func (o *UnclaimedDraftCreateRequest) GetUsePreexistingFields() bool {
	if o == nil || o.UsePreexistingFields == nil {
		var ret bool
		return ret
	}
	return *o.UsePreexistingFields
}

// GetUsePreexistingFieldsOk returns a tuple with the UsePreexistingFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnclaimedDraftCreateRequest) GetUsePreexistingFieldsOk() (*bool, bool) {
	if o == nil || o.UsePreexistingFields == nil {
		return nil, false
	}
	return o.UsePreexistingFields, true
}

// HasUsePreexistingFields returns a boolean if a field has been set.
func (o *UnclaimedDraftCreateRequest) HasUsePreexistingFields() bool {
	if o != nil && o.UsePreexistingFields != nil {
		return true
	}

	return false
}

// SetUsePreexistingFields gets a reference to the given bool and assigns it to the UsePreexistingFields field.
func (o *UnclaimedDraftCreateRequest) SetUsePreexistingFields(v bool) {
	o.UsePreexistingFields = &v
}

// GetUseTextTags returns the UseTextTags field value if set, zero value otherwise.
func (o *UnclaimedDraftCreateRequest) GetUseTextTags() bool {
	if o == nil || o.UseTextTags == nil {
		var ret bool
		return ret
	}
	return *o.UseTextTags
}

// GetUseTextTagsOk returns a tuple with the UseTextTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnclaimedDraftCreateRequest) GetUseTextTagsOk() (*bool, bool) {
	if o == nil || o.UseTextTags == nil {
		return nil, false
	}
	return o.UseTextTags, true
}

// HasUseTextTags returns a boolean if a field has been set.
func (o *UnclaimedDraftCreateRequest) HasUseTextTags() bool {
	if o != nil && o.UseTextTags != nil {
		return true
	}

	return false
}

// SetUseTextTags gets a reference to the given bool and assigns it to the UseTextTags field.
func (o *UnclaimedDraftCreateRequest) SetUseTextTags(v bool) {
	o.UseTextTags = &v
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnclaimedDraftCreateRequest) GetExpiresAt() int32 {
	if o == nil || o.ExpiresAt.Get() == nil {
		var ret int32
		return ret
	}
	return *o.ExpiresAt.Get()
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnclaimedDraftCreateRequest) GetExpiresAtOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ExpiresAt.Get(), o.ExpiresAt.IsSet()
}

// HasExpiresAt returns a boolean if a field has been set.
func (o *UnclaimedDraftCreateRequest) HasExpiresAt() bool {
	if o != nil && o.ExpiresAt.IsSet() {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given NullableInt32 and assigns it to the ExpiresAt field.
func (o *UnclaimedDraftCreateRequest) SetExpiresAt(v int32) {
	o.ExpiresAt.Set(&v)
}
// SetExpiresAtNil sets the value for ExpiresAt to be an explicit nil
func (o *UnclaimedDraftCreateRequest) SetExpiresAtNil() {
	o.ExpiresAt.Set(nil)
}

// UnsetExpiresAt ensures that no value is present for ExpiresAt, not even an explicit nil
func (o *UnclaimedDraftCreateRequest) UnsetExpiresAt() {
	o.ExpiresAt.Unset()
}

func (o UnclaimedDraftCreateRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.Files != nil {
		toSerialize["files"] = o.Files
	}
	if o.FileUrls != nil {
		toSerialize["file_urls"] = o.FileUrls
	}
	if o.AllowDecline != nil {
		toSerialize["allow_decline"] = o.AllowDecline
	}
	if o.Attachments != nil {
		toSerialize["attachments"] = o.Attachments
	}
	if o.CcEmailAddresses != nil {
		toSerialize["cc_email_addresses"] = o.CcEmailAddresses
	}
	if o.ClientId != nil {
		toSerialize["client_id"] = o.ClientId
	}
	if o.CustomFields != nil {
		toSerialize["custom_fields"] = o.CustomFields
	}
	if o.FieldOptions != nil {
		toSerialize["field_options"] = o.FieldOptions
	}
	if o.FormFieldGroups != nil {
		toSerialize["form_field_groups"] = o.FormFieldGroups
	}
	if o.FormFieldRules != nil {
		toSerialize["form_field_rules"] = o.FormFieldRules
	}
	if o.FormFieldsPerDocument != nil {
		toSerialize["form_fields_per_document"] = o.FormFieldsPerDocument
	}
	if o.HideTextTags != nil {
		toSerialize["hide_text_tags"] = o.HideTextTags
	}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.ShowProgressStepper != nil {
		toSerialize["show_progress_stepper"] = o.ShowProgressStepper
	}
	if o.Signers != nil {
		toSerialize["signers"] = o.Signers
	}
	if o.SigningOptions != nil {
		toSerialize["signing_options"] = o.SigningOptions
	}
	if o.SigningRedirectUrl != nil {
		toSerialize["signing_redirect_url"] = o.SigningRedirectUrl
	}
	if o.Subject != nil {
		toSerialize["subject"] = o.Subject
	}
	if o.TestMode != nil {
		toSerialize["test_mode"] = o.TestMode
	}
	if o.UsePreexistingFields != nil {
		toSerialize["use_preexisting_fields"] = o.UsePreexistingFields
	}
	if o.UseTextTags != nil {
		toSerialize["use_text_tags"] = o.UseTextTags
	}
	if o.ExpiresAt.IsSet() {
		toSerialize["expires_at"] = o.ExpiresAt.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableUnclaimedDraftCreateRequest struct {
	value *UnclaimedDraftCreateRequest
	isSet bool
}

func (v NullableUnclaimedDraftCreateRequest) Get() *UnclaimedDraftCreateRequest {
	return v.value
}

func (v *NullableUnclaimedDraftCreateRequest) Set(val *UnclaimedDraftCreateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUnclaimedDraftCreateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUnclaimedDraftCreateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnclaimedDraftCreateRequest(val *UnclaimedDraftCreateRequest) *NullableUnclaimedDraftCreateRequest {
	return &NullableUnclaimedDraftCreateRequest{value: val, isSet: true}
}

func (v NullableUnclaimedDraftCreateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnclaimedDraftCreateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


