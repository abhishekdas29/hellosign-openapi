/*
Dropbox Sign API

Dropbox Sign v3 API

API version: 3.0.0
Contact: apisupport@hellosign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dropboxsign

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"os"
)

// Linger please
var (
	_ _context.Context
)

// SignatureRequestApiService SignatureRequestApi service
type SignatureRequestApiService service

type SignatureRequestApiApiSignatureRequestBulkCreateEmbeddedWithTemplateRequest struct {
	ctx _context.Context
	ApiService *SignatureRequestApiService
	signatureRequestBulkCreateEmbeddedWithTemplateRequest *SignatureRequestBulkCreateEmbeddedWithTemplateRequest
}

func (r SignatureRequestApiApiSignatureRequestBulkCreateEmbeddedWithTemplateRequest) SignatureRequestBulkCreateEmbeddedWithTemplateRequest(signatureRequestBulkCreateEmbeddedWithTemplateRequest SignatureRequestBulkCreateEmbeddedWithTemplateRequest) SignatureRequestApiApiSignatureRequestBulkCreateEmbeddedWithTemplateRequest {
	r.signatureRequestBulkCreateEmbeddedWithTemplateRequest = &signatureRequestBulkCreateEmbeddedWithTemplateRequest
	return r
}

func (r SignatureRequestApiApiSignatureRequestBulkCreateEmbeddedWithTemplateRequest) Execute() (BulkSendJobSendResponse, *_nethttp.Response, error) {
	return r.ApiService.SignatureRequestBulkCreateEmbeddedWithTemplateExecute(r)
}

/*
SignatureRequestBulkCreateEmbeddedWithTemplate Embedded Bulk Send with Template

Creates BulkSendJob which sends up to 250 SignatureRequests in bulk based off of the provided Template(s) specified with the `template_ids` parameter to be signed in an embedded iFrame. These embedded signature requests can only be signed in embedded iFrames whereas normal signature requests can only be signed on Dropbox Sign.

**NOTE**: Only available for Standard plan and higher.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return SignatureRequestApiApiSignatureRequestBulkCreateEmbeddedWithTemplateRequest
*/
func (a *SignatureRequestApiService) SignatureRequestBulkCreateEmbeddedWithTemplate(ctx _context.Context) SignatureRequestApiApiSignatureRequestBulkCreateEmbeddedWithTemplateRequest {
	return SignatureRequestApiApiSignatureRequestBulkCreateEmbeddedWithTemplateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BulkSendJobSendResponse
func (a *SignatureRequestApiService) SignatureRequestBulkCreateEmbeddedWithTemplateExecute(r SignatureRequestApiApiSignatureRequestBulkCreateEmbeddedWithTemplateRequest) (BulkSendJobSendResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BulkSendJobSendResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SignatureRequestApiService.SignatureRequestBulkCreateEmbeddedWithTemplate")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/signature_request/bulk_create_embedded_with_template"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.signatureRequestBulkCreateEmbeddedWithTemplateRequest == nil {
		return localVarReturnValue, nil, reportError("signatureRequestBulkCreateEmbeddedWithTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.signatureRequestBulkCreateEmbeddedWithTemplateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SignatureRequestApiApiSignatureRequestBulkSendWithTemplateRequest struct {
	ctx _context.Context
	ApiService *SignatureRequestApiService
	signatureRequestBulkSendWithTemplateRequest *SignatureRequestBulkSendWithTemplateRequest
}

func (r SignatureRequestApiApiSignatureRequestBulkSendWithTemplateRequest) SignatureRequestBulkSendWithTemplateRequest(signatureRequestBulkSendWithTemplateRequest SignatureRequestBulkSendWithTemplateRequest) SignatureRequestApiApiSignatureRequestBulkSendWithTemplateRequest {
	r.signatureRequestBulkSendWithTemplateRequest = &signatureRequestBulkSendWithTemplateRequest
	return r
}

func (r SignatureRequestApiApiSignatureRequestBulkSendWithTemplateRequest) Execute() (BulkSendJobSendResponse, *_nethttp.Response, error) {
	return r.ApiService.SignatureRequestBulkSendWithTemplateExecute(r)
}

/*
SignatureRequestBulkSendWithTemplate Bulk Send with Template

Creates BulkSendJob which sends up to 250 SignatureRequests in bulk based off of the provided Template(s) specified with the `template_ids` parameter.

**NOTE**: Only available for Standard plan and higher.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return SignatureRequestApiApiSignatureRequestBulkSendWithTemplateRequest
*/
func (a *SignatureRequestApiService) SignatureRequestBulkSendWithTemplate(ctx _context.Context) SignatureRequestApiApiSignatureRequestBulkSendWithTemplateRequest {
	return SignatureRequestApiApiSignatureRequestBulkSendWithTemplateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BulkSendJobSendResponse
func (a *SignatureRequestApiService) SignatureRequestBulkSendWithTemplateExecute(r SignatureRequestApiApiSignatureRequestBulkSendWithTemplateRequest) (BulkSendJobSendResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BulkSendJobSendResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SignatureRequestApiService.SignatureRequestBulkSendWithTemplate")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/signature_request/bulk_send_with_template"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.signatureRequestBulkSendWithTemplateRequest == nil {
		return localVarReturnValue, nil, reportError("signatureRequestBulkSendWithTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.signatureRequestBulkSendWithTemplateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SignatureRequestApiApiSignatureRequestCancelRequest struct {
	ctx _context.Context
	ApiService *SignatureRequestApiService
	signatureRequestId string
}


func (r SignatureRequestApiApiSignatureRequestCancelRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SignatureRequestCancelExecute(r)
}

/*
SignatureRequestCancel Cancel Incomplete Signature Request

Cancels an incomplete signature request. This action is **not reversible**.

The request will be canceled and signers will no longer be able to sign. If they try to access the signature request they will receive a HTTP 410 status code indicating that the resource has been deleted. Cancelation is asynchronous and a successful call to this endpoint will return an empty 200 OK response if the signature request is eligible to be canceled and has been successfully queued.

This 200 OK response does not indicate a successful cancelation of the signature request itself. The cancelation is confirmed via the `signature_request_canceled` event. It is recommended that a  [callback handler](/api/reference/tag/Callbacks-and-Events) be implemented to listen for the `signature_request_canceled` event. This callback will be sent only when the cancelation has completed successfully. If a callback handler has been configured and the event has not been received within 60 minutes of making the call, check the status of the request in the [API Dashboard](https://app.hellosign.com/apidashboard) and retry the cancelation if necessary.

To be eligible for cancelation, a signature request must have been sent successfully, must not yet have been signed by all signers, and you must either be the sender or own the API app under which it was sent. A partially signed signature request can be canceled.

**NOTE**: To remove your access to a completed signature request, use the endpoint: `POST /signature_request/remove/[:signature_request_id]`.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param signatureRequestId The id of the incomplete SignatureRequest to cancel.
 @return SignatureRequestApiApiSignatureRequestCancelRequest
*/
func (a *SignatureRequestApiService) SignatureRequestCancel(ctx _context.Context, signatureRequestId string) SignatureRequestApiApiSignatureRequestCancelRequest {
	return SignatureRequestApiApiSignatureRequestCancelRequest{
		ApiService: a,
		ctx: ctx,
		signatureRequestId: signatureRequestId,
	}
}

// Execute executes the request
func (a *SignatureRequestApiService) SignatureRequestCancelExecute(r SignatureRequestApiApiSignatureRequestCancelRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SignatureRequestApiService.SignatureRequestCancel")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/signature_request/cancel/{signature_request_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"signature_request_id"+"}", _neturl.PathEscape(parameterToString(r.signatureRequestId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type SignatureRequestApiApiSignatureRequestCreateEmbeddedRequest struct {
	ctx _context.Context
	ApiService *SignatureRequestApiService
	signatureRequestCreateEmbeddedRequest *SignatureRequestCreateEmbeddedRequest
}

func (r SignatureRequestApiApiSignatureRequestCreateEmbeddedRequest) SignatureRequestCreateEmbeddedRequest(signatureRequestCreateEmbeddedRequest SignatureRequestCreateEmbeddedRequest) SignatureRequestApiApiSignatureRequestCreateEmbeddedRequest {
	r.signatureRequestCreateEmbeddedRequest = &signatureRequestCreateEmbeddedRequest
	return r
}

func (r SignatureRequestApiApiSignatureRequestCreateEmbeddedRequest) Execute() (SignatureRequestGetResponse, *_nethttp.Response, error) {
	return r.ApiService.SignatureRequestCreateEmbeddedExecute(r)
}

/*
SignatureRequestCreateEmbedded Create Embedded Signature Request

Creates a new SignatureRequest with the submitted documents to be signed in an embedded iFrame. If form_fields_per_document is not specified, a signature page will be affixed where all signers will be required to add their signature, signifying their agreement to all contained documents. <u>Note</u> that embedded signature requests can only be signed in embedded iFrames whereas normal signature requests can only be signed on Dropbox Sign.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return SignatureRequestApiApiSignatureRequestCreateEmbeddedRequest
*/
func (a *SignatureRequestApiService) SignatureRequestCreateEmbedded(ctx _context.Context) SignatureRequestApiApiSignatureRequestCreateEmbeddedRequest {
	return SignatureRequestApiApiSignatureRequestCreateEmbeddedRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SignatureRequestGetResponse
func (a *SignatureRequestApiService) SignatureRequestCreateEmbeddedExecute(r SignatureRequestApiApiSignatureRequestCreateEmbeddedRequest) (SignatureRequestGetResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SignatureRequestGetResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SignatureRequestApiService.SignatureRequestCreateEmbedded")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/signature_request/create_embedded"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.signatureRequestCreateEmbeddedRequest == nil {
		return localVarReturnValue, nil, reportError("signatureRequestCreateEmbeddedRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.signatureRequestCreateEmbeddedRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SignatureRequestApiApiSignatureRequestCreateEmbeddedWithTemplateRequest struct {
	ctx _context.Context
	ApiService *SignatureRequestApiService
	signatureRequestCreateEmbeddedWithTemplateRequest *SignatureRequestCreateEmbeddedWithTemplateRequest
}

func (r SignatureRequestApiApiSignatureRequestCreateEmbeddedWithTemplateRequest) SignatureRequestCreateEmbeddedWithTemplateRequest(signatureRequestCreateEmbeddedWithTemplateRequest SignatureRequestCreateEmbeddedWithTemplateRequest) SignatureRequestApiApiSignatureRequestCreateEmbeddedWithTemplateRequest {
	r.signatureRequestCreateEmbeddedWithTemplateRequest = &signatureRequestCreateEmbeddedWithTemplateRequest
	return r
}

func (r SignatureRequestApiApiSignatureRequestCreateEmbeddedWithTemplateRequest) Execute() (SignatureRequestGetResponse, *_nethttp.Response, error) {
	return r.ApiService.SignatureRequestCreateEmbeddedWithTemplateExecute(r)
}

/*
SignatureRequestCreateEmbeddedWithTemplate Create Embedded Signature Request with Template

Creates a new SignatureRequest based on the given Template(s) to be signed in an embedded iFrame. <u>Note</u> that embedded signature requests can only be signed in embedded iFrames whereas normal signature requests can only be signed on Dropbox Sign.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return SignatureRequestApiApiSignatureRequestCreateEmbeddedWithTemplateRequest
*/
func (a *SignatureRequestApiService) SignatureRequestCreateEmbeddedWithTemplate(ctx _context.Context) SignatureRequestApiApiSignatureRequestCreateEmbeddedWithTemplateRequest {
	return SignatureRequestApiApiSignatureRequestCreateEmbeddedWithTemplateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SignatureRequestGetResponse
func (a *SignatureRequestApiService) SignatureRequestCreateEmbeddedWithTemplateExecute(r SignatureRequestApiApiSignatureRequestCreateEmbeddedWithTemplateRequest) (SignatureRequestGetResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SignatureRequestGetResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SignatureRequestApiService.SignatureRequestCreateEmbeddedWithTemplate")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/signature_request/create_embedded_with_template"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.signatureRequestCreateEmbeddedWithTemplateRequest == nil {
		return localVarReturnValue, nil, reportError("signatureRequestCreateEmbeddedWithTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.signatureRequestCreateEmbeddedWithTemplateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SignatureRequestApiApiSignatureRequestFilesRequest struct {
	ctx _context.Context
	ApiService *SignatureRequestApiService
	signatureRequestId string
	fileType *string
}

// Set to &#x60;pdf&#x60; for a single merged document or &#x60;zip&#x60; for a collection of individual documents.
func (r SignatureRequestApiApiSignatureRequestFilesRequest) FileType(fileType string) SignatureRequestApiApiSignatureRequestFilesRequest {
	r.fileType = &fileType
	return r
}

func (r SignatureRequestApiApiSignatureRequestFilesRequest) Execute() (*os.File, *_nethttp.Response, error) {
	return r.ApiService.SignatureRequestFilesExecute(r)
}

/*
SignatureRequestFiles Download Files

Obtain a copy of the current documents specified by the `signature_request_id` parameter. Returns a PDF or ZIP file.

If the files are currently being prepared, a status code of `409` will be returned instead.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param signatureRequestId The id of the SignatureRequest to retrieve.
 @return SignatureRequestApiApiSignatureRequestFilesRequest
*/
func (a *SignatureRequestApiService) SignatureRequestFiles(ctx _context.Context, signatureRequestId string) SignatureRequestApiApiSignatureRequestFilesRequest {
	return SignatureRequestApiApiSignatureRequestFilesRequest{
		ApiService: a,
		ctx: ctx,
		signatureRequestId: signatureRequestId,
	}
}

// Execute executes the request
//  @return *os.File
func (a *SignatureRequestApiService) SignatureRequestFilesExecute(r SignatureRequestApiApiSignatureRequestFilesRequest) (*os.File, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SignatureRequestApiService.SignatureRequestFiles")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/signature_request/files/{signature_request_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"signature_request_id"+"}", _neturl.PathEscape(parameterToString(r.signatureRequestId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.fileType != nil {
		localVarQueryParams.Add("file_type", parameterToString(*r.fileType, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/pdf", "application/zip", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SignatureRequestApiApiSignatureRequestFilesAsDataUriRequest struct {
	ctx _context.Context
	ApiService *SignatureRequestApiService
	signatureRequestId string
}


func (r SignatureRequestApiApiSignatureRequestFilesAsDataUriRequest) Execute() (FileResponseDataUri, *_nethttp.Response, error) {
	return r.ApiService.SignatureRequestFilesAsDataUriExecute(r)
}

/*
SignatureRequestFilesAsDataUri Download Files as Data Uri

Obtain a copy of the current documents specified by the `signature_request_id` parameter. Returns a JSON object with a `data_uri` representing the base64 encoded file (PDFs only).

If the files are currently being prepared, a status code of `409` will be returned instead.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param signatureRequestId The id of the SignatureRequest to retrieve.
 @return SignatureRequestApiApiSignatureRequestFilesAsDataUriRequest
*/
func (a *SignatureRequestApiService) SignatureRequestFilesAsDataUri(ctx _context.Context, signatureRequestId string) SignatureRequestApiApiSignatureRequestFilesAsDataUriRequest {
	return SignatureRequestApiApiSignatureRequestFilesAsDataUriRequest{
		ApiService: a,
		ctx: ctx,
		signatureRequestId: signatureRequestId,
	}
}

// Execute executes the request
//  @return FileResponseDataUri
func (a *SignatureRequestApiService) SignatureRequestFilesAsDataUriExecute(r SignatureRequestApiApiSignatureRequestFilesAsDataUriRequest) (FileResponseDataUri, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  FileResponseDataUri
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SignatureRequestApiService.SignatureRequestFilesAsDataUri")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/signature_request/files_as_data_uri/{signature_request_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"signature_request_id"+"}", _neturl.PathEscape(parameterToString(r.signatureRequestId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SignatureRequestApiApiSignatureRequestFilesAsFileUrlRequest struct {
	ctx _context.Context
	ApiService *SignatureRequestApiService
	signatureRequestId string
}


func (r SignatureRequestApiApiSignatureRequestFilesAsFileUrlRequest) Execute() (FileResponse, *_nethttp.Response, error) {
	return r.ApiService.SignatureRequestFilesAsFileUrlExecute(r)
}

/*
SignatureRequestFilesAsFileUrl Download Files as File Url

Obtain a copy of the current documents specified by the `signature_request_id` parameter. Returns a JSON object with a url to the file (PDFs only).

If the files are currently being prepared, a status code of `409` will be returned instead.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param signatureRequestId The id of the SignatureRequest to retrieve.
 @return SignatureRequestApiApiSignatureRequestFilesAsFileUrlRequest
*/
func (a *SignatureRequestApiService) SignatureRequestFilesAsFileUrl(ctx _context.Context, signatureRequestId string) SignatureRequestApiApiSignatureRequestFilesAsFileUrlRequest {
	return SignatureRequestApiApiSignatureRequestFilesAsFileUrlRequest{
		ApiService: a,
		ctx: ctx,
		signatureRequestId: signatureRequestId,
	}
}

// Execute executes the request
//  @return FileResponse
func (a *SignatureRequestApiService) SignatureRequestFilesAsFileUrlExecute(r SignatureRequestApiApiSignatureRequestFilesAsFileUrlRequest) (FileResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  FileResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SignatureRequestApiService.SignatureRequestFilesAsFileUrl")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/signature_request/files_as_file_url/{signature_request_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"signature_request_id"+"}", _neturl.PathEscape(parameterToString(r.signatureRequestId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SignatureRequestApiApiSignatureRequestGetRequest struct {
	ctx _context.Context
	ApiService *SignatureRequestApiService
	signatureRequestId string
}


func (r SignatureRequestApiApiSignatureRequestGetRequest) Execute() (SignatureRequestGetResponse, *_nethttp.Response, error) {
	return r.ApiService.SignatureRequestGetExecute(r)
}

/*
SignatureRequestGet Get Signature Request

Returns the status of the SignatureRequest specified by the `signature_request_id` parameter.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param signatureRequestId The id of the SignatureRequest to retrieve.
 @return SignatureRequestApiApiSignatureRequestGetRequest
*/
func (a *SignatureRequestApiService) SignatureRequestGet(ctx _context.Context, signatureRequestId string) SignatureRequestApiApiSignatureRequestGetRequest {
	return SignatureRequestApiApiSignatureRequestGetRequest{
		ApiService: a,
		ctx: ctx,
		signatureRequestId: signatureRequestId,
	}
}

// Execute executes the request
//  @return SignatureRequestGetResponse
func (a *SignatureRequestApiService) SignatureRequestGetExecute(r SignatureRequestApiApiSignatureRequestGetRequest) (SignatureRequestGetResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SignatureRequestGetResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SignatureRequestApiService.SignatureRequestGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/signature_request/{signature_request_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"signature_request_id"+"}", _neturl.PathEscape(parameterToString(r.signatureRequestId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SignatureRequestApiApiSignatureRequestListRequest struct {
	ctx _context.Context
	ApiService *SignatureRequestApiService
	accountId *string
	page *int32
	pageSize *int32
	query *string
}

// Which account to return SignatureRequests for. Must be a team member. Use &#x60;all&#x60; to indicate all team members. Defaults to your account.
func (r SignatureRequestApiApiSignatureRequestListRequest) AccountId(accountId string) SignatureRequestApiApiSignatureRequestListRequest {
	r.accountId = &accountId
	return r
}
// Which page number of the SignatureRequest List to return. Defaults to &#x60;1&#x60;.
func (r SignatureRequestApiApiSignatureRequestListRequest) Page(page int32) SignatureRequestApiApiSignatureRequestListRequest {
	r.page = &page
	return r
}
// Number of objects to be returned per page. Must be between &#x60;1&#x60; and &#x60;100&#x60;. Default is &#x60;20&#x60;.
func (r SignatureRequestApiApiSignatureRequestListRequest) PageSize(pageSize int32) SignatureRequestApiApiSignatureRequestListRequest {
	r.pageSize = &pageSize
	return r
}
// String that includes search terms and/or fields to be used to filter the SignatureRequest objects.
func (r SignatureRequestApiApiSignatureRequestListRequest) Query(query string) SignatureRequestApiApiSignatureRequestListRequest {
	r.query = &query
	return r
}

func (r SignatureRequestApiApiSignatureRequestListRequest) Execute() (SignatureRequestListResponse, *_nethttp.Response, error) {
	return r.ApiService.SignatureRequestListExecute(r)
}

/*
SignatureRequestList List Signature Requests

Returns a list of SignatureRequests that you can access. This includes SignatureRequests you have sent as well as received, but not ones that you have been CCed on.

Take a look at our [search guide](/api/reference/search/) to learn more about querying signature requests.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return SignatureRequestApiApiSignatureRequestListRequest
*/
func (a *SignatureRequestApiService) SignatureRequestList(ctx _context.Context) SignatureRequestApiApiSignatureRequestListRequest {
	return SignatureRequestApiApiSignatureRequestListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SignatureRequestListResponse
func (a *SignatureRequestApiService) SignatureRequestListExecute(r SignatureRequestApiApiSignatureRequestListRequest) (SignatureRequestListResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SignatureRequestListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SignatureRequestApiService.SignatureRequestList")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/signature_request/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.accountId != nil {
		localVarQueryParams.Add("account_id", parameterToString(*r.accountId, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("page_size", parameterToString(*r.pageSize, ""))
	}
	if r.query != nil {
		localVarQueryParams.Add("query", parameterToString(*r.query, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SignatureRequestApiApiSignatureRequestReleaseHoldRequest struct {
	ctx _context.Context
	ApiService *SignatureRequestApiService
	signatureRequestId string
}


func (r SignatureRequestApiApiSignatureRequestReleaseHoldRequest) Execute() (SignatureRequestGetResponse, *_nethttp.Response, error) {
	return r.ApiService.SignatureRequestReleaseHoldExecute(r)
}

/*
SignatureRequestReleaseHold Release On-Hold Signature Request

Releases a held SignatureRequest that was claimed and prepared from an [UnclaimedDraft](/api/reference/tag/Unclaimed-Draft). The owner of the Draft must indicate at Draft creation that the SignatureRequest created from the Draft should be held. Releasing the SignatureRequest will send requests to all signers.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param signatureRequestId The id of the SignatureRequest to release.
 @return SignatureRequestApiApiSignatureRequestReleaseHoldRequest
*/
func (a *SignatureRequestApiService) SignatureRequestReleaseHold(ctx _context.Context, signatureRequestId string) SignatureRequestApiApiSignatureRequestReleaseHoldRequest {
	return SignatureRequestApiApiSignatureRequestReleaseHoldRequest{
		ApiService: a,
		ctx: ctx,
		signatureRequestId: signatureRequestId,
	}
}

// Execute executes the request
//  @return SignatureRequestGetResponse
func (a *SignatureRequestApiService) SignatureRequestReleaseHoldExecute(r SignatureRequestApiApiSignatureRequestReleaseHoldRequest) (SignatureRequestGetResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SignatureRequestGetResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SignatureRequestApiService.SignatureRequestReleaseHold")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/signature_request/release_hold/{signature_request_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"signature_request_id"+"}", _neturl.PathEscape(parameterToString(r.signatureRequestId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SignatureRequestApiApiSignatureRequestRemindRequest struct {
	ctx _context.Context
	ApiService *SignatureRequestApiService
	signatureRequestId string
	signatureRequestRemindRequest *SignatureRequestRemindRequest
}

func (r SignatureRequestApiApiSignatureRequestRemindRequest) SignatureRequestRemindRequest(signatureRequestRemindRequest SignatureRequestRemindRequest) SignatureRequestApiApiSignatureRequestRemindRequest {
	r.signatureRequestRemindRequest = &signatureRequestRemindRequest
	return r
}

func (r SignatureRequestApiApiSignatureRequestRemindRequest) Execute() (SignatureRequestGetResponse, *_nethttp.Response, error) {
	return r.ApiService.SignatureRequestRemindExecute(r)
}

/*
SignatureRequestRemind Send Request Reminder

Sends an email to the signer reminding them to sign the signature request. You cannot send a reminder within 1 hour of the last reminder that was sent. This includes manual AND automatic reminders.

**NOTE**: This action can **not** be used with embedded signature requests.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param signatureRequestId The id of the SignatureRequest to send a reminder for.
 @return SignatureRequestApiApiSignatureRequestRemindRequest
*/
func (a *SignatureRequestApiService) SignatureRequestRemind(ctx _context.Context, signatureRequestId string) SignatureRequestApiApiSignatureRequestRemindRequest {
	return SignatureRequestApiApiSignatureRequestRemindRequest{
		ApiService: a,
		ctx: ctx,
		signatureRequestId: signatureRequestId,
	}
}

// Execute executes the request
//  @return SignatureRequestGetResponse
func (a *SignatureRequestApiService) SignatureRequestRemindExecute(r SignatureRequestApiApiSignatureRequestRemindRequest) (SignatureRequestGetResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SignatureRequestGetResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SignatureRequestApiService.SignatureRequestRemind")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/signature_request/remind/{signature_request_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"signature_request_id"+"}", _neturl.PathEscape(parameterToString(r.signatureRequestId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.signatureRequestRemindRequest == nil {
		return localVarReturnValue, nil, reportError("signatureRequestRemindRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.signatureRequestRemindRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SignatureRequestApiApiSignatureRequestRemoveRequest struct {
	ctx _context.Context
	ApiService *SignatureRequestApiService
	signatureRequestId string
}


func (r SignatureRequestApiApiSignatureRequestRemoveRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SignatureRequestRemoveExecute(r)
}

/*
SignatureRequestRemove Remove Signature Request Access

Removes your access to a completed signature request. This action is **not reversible**.

The signature request must be fully executed by all parties (signed or declined to sign). Other parties will continue to maintain access to the completed signature request document(s).

Unlike /signature_request/cancel, this endpoint is synchronous and your access will be immediately removed. Upon successful removal, this endpoint will return a 200 OK response.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param signatureRequestId The id of the SignatureRequest to remove.
 @return SignatureRequestApiApiSignatureRequestRemoveRequest
*/
func (a *SignatureRequestApiService) SignatureRequestRemove(ctx _context.Context, signatureRequestId string) SignatureRequestApiApiSignatureRequestRemoveRequest {
	return SignatureRequestApiApiSignatureRequestRemoveRequest{
		ApiService: a,
		ctx: ctx,
		signatureRequestId: signatureRequestId,
	}
}

// Execute executes the request
func (a *SignatureRequestApiService) SignatureRequestRemoveExecute(r SignatureRequestApiApiSignatureRequestRemoveRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SignatureRequestApiService.SignatureRequestRemove")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/signature_request/remove/{signature_request_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"signature_request_id"+"}", _neturl.PathEscape(parameterToString(r.signatureRequestId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type SignatureRequestApiApiSignatureRequestSendRequest struct {
	ctx _context.Context
	ApiService *SignatureRequestApiService
	signatureRequestSendRequest *SignatureRequestSendRequest
}

func (r SignatureRequestApiApiSignatureRequestSendRequest) SignatureRequestSendRequest(signatureRequestSendRequest SignatureRequestSendRequest) SignatureRequestApiApiSignatureRequestSendRequest {
	r.signatureRequestSendRequest = &signatureRequestSendRequest
	return r
}

func (r SignatureRequestApiApiSignatureRequestSendRequest) Execute() (SignatureRequestGetResponse, *_nethttp.Response, error) {
	return r.ApiService.SignatureRequestSendExecute(r)
}

/*
SignatureRequestSend Send Signature Request

Creates and sends a new SignatureRequest with the submitted documents. If `form_fields_per_document` is not specified, a signature page will be affixed where all signers will be required to add their signature, signifying their agreement to all contained documents.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return SignatureRequestApiApiSignatureRequestSendRequest
*/
func (a *SignatureRequestApiService) SignatureRequestSend(ctx _context.Context) SignatureRequestApiApiSignatureRequestSendRequest {
	return SignatureRequestApiApiSignatureRequestSendRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SignatureRequestGetResponse
func (a *SignatureRequestApiService) SignatureRequestSendExecute(r SignatureRequestApiApiSignatureRequestSendRequest) (SignatureRequestGetResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SignatureRequestGetResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SignatureRequestApiService.SignatureRequestSend")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/signature_request/send"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.signatureRequestSendRequest == nil {
		return localVarReturnValue, nil, reportError("signatureRequestSendRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.signatureRequestSendRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SignatureRequestApiApiSignatureRequestSendWithTemplateRequest struct {
	ctx _context.Context
	ApiService *SignatureRequestApiService
	signatureRequestSendWithTemplateRequest *SignatureRequestSendWithTemplateRequest
}

func (r SignatureRequestApiApiSignatureRequestSendWithTemplateRequest) SignatureRequestSendWithTemplateRequest(signatureRequestSendWithTemplateRequest SignatureRequestSendWithTemplateRequest) SignatureRequestApiApiSignatureRequestSendWithTemplateRequest {
	r.signatureRequestSendWithTemplateRequest = &signatureRequestSendWithTemplateRequest
	return r
}

func (r SignatureRequestApiApiSignatureRequestSendWithTemplateRequest) Execute() (SignatureRequestGetResponse, *_nethttp.Response, error) {
	return r.ApiService.SignatureRequestSendWithTemplateExecute(r)
}

/*
SignatureRequestSendWithTemplate Send with Template

Creates and sends a new SignatureRequest based off of the Template(s) specified with the `template_ids` parameter.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return SignatureRequestApiApiSignatureRequestSendWithTemplateRequest
*/
func (a *SignatureRequestApiService) SignatureRequestSendWithTemplate(ctx _context.Context) SignatureRequestApiApiSignatureRequestSendWithTemplateRequest {
	return SignatureRequestApiApiSignatureRequestSendWithTemplateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SignatureRequestGetResponse
func (a *SignatureRequestApiService) SignatureRequestSendWithTemplateExecute(r SignatureRequestApiApiSignatureRequestSendWithTemplateRequest) (SignatureRequestGetResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SignatureRequestGetResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SignatureRequestApiService.SignatureRequestSendWithTemplate")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/signature_request/send_with_template"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.signatureRequestSendWithTemplateRequest == nil {
		return localVarReturnValue, nil, reportError("signatureRequestSendWithTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.signatureRequestSendWithTemplateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SignatureRequestApiApiSignatureRequestUpdateRequest struct {
	ctx _context.Context
	ApiService *SignatureRequestApiService
	signatureRequestId string
	signatureRequestUpdateRequest *SignatureRequestUpdateRequest
}

func (r SignatureRequestApiApiSignatureRequestUpdateRequest) SignatureRequestUpdateRequest(signatureRequestUpdateRequest SignatureRequestUpdateRequest) SignatureRequestApiApiSignatureRequestUpdateRequest {
	r.signatureRequestUpdateRequest = &signatureRequestUpdateRequest
	return r
}

func (r SignatureRequestApiApiSignatureRequestUpdateRequest) Execute() (SignatureRequestGetResponse, *_nethttp.Response, error) {
	return r.ApiService.SignatureRequestUpdateExecute(r)
}

/*
SignatureRequestUpdate Update Signature Request

Updates the email address and/or the name for a given signer on a signature request. You can listen for the `signature_request_email_bounce` event on your app or account to detect bounced emails, and respond with this method.

Updating the email address of a signer will generate a new `signature_id` value.

**NOTE**: This action cannot be performed on a signature request with an appended signature page.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param signatureRequestId The id of the SignatureRequest to update.
 @return SignatureRequestApiApiSignatureRequestUpdateRequest
*/
func (a *SignatureRequestApiService) SignatureRequestUpdate(ctx _context.Context, signatureRequestId string) SignatureRequestApiApiSignatureRequestUpdateRequest {
	return SignatureRequestApiApiSignatureRequestUpdateRequest{
		ApiService: a,
		ctx: ctx,
		signatureRequestId: signatureRequestId,
	}
}

// Execute executes the request
//  @return SignatureRequestGetResponse
func (a *SignatureRequestApiService) SignatureRequestUpdateExecute(r SignatureRequestApiApiSignatureRequestUpdateRequest) (SignatureRequestGetResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SignatureRequestGetResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SignatureRequestApiService.SignatureRequestUpdate")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/signature_request/update/{signature_request_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"signature_request_id"+"}", _neturl.PathEscape(parameterToString(r.signatureRequestId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.signatureRequestUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("signatureRequestUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.signatureRequestUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
