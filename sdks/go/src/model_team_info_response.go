/*
Dropbox Sign API

Dropbox Sign v3 API

API version: 3.0.0
Contact: apisupport@hellosign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dropboxsign

import (
	"encoding/json"
)

// TeamInfoResponse struct for TeamInfoResponse
type TeamInfoResponse struct {
	// The id of a team
	TeamId *string `json:"team_id,omitempty"`
	TeamParent NullableTeamParentResponse `json:"team_parent,omitempty"`
	// The name of a team
	Name *string `json:"name,omitempty"`
	// Number of members within a team
	NumMembers *int32 `json:"num_members,omitempty"`
	// Number of sub teams within a team
	NumSubTeams *int32 `json:"num_sub_teams,omitempty"`
}

// NewTeamInfoResponse instantiates a new TeamInfoResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTeamInfoResponse() *TeamInfoResponse {
	this := TeamInfoResponse{}
	return &this
}

// NewTeamInfoResponseWithDefaults instantiates a new TeamInfoResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTeamInfoResponseWithDefaults() *TeamInfoResponse {
	this := TeamInfoResponse{}
	return &this
}

// GetTeamId returns the TeamId field value if set, zero value otherwise.
func (o *TeamInfoResponse) GetTeamId() string {
	if o == nil || o.TeamId == nil {
		var ret string
		return ret
	}
	return *o.TeamId
}

// GetTeamIdOk returns a tuple with the TeamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamInfoResponse) GetTeamIdOk() (*string, bool) {
	if o == nil || o.TeamId == nil {
		return nil, false
	}
	return o.TeamId, true
}

// HasTeamId returns a boolean if a field has been set.
func (o *TeamInfoResponse) HasTeamId() bool {
	if o != nil && o.TeamId != nil {
		return true
	}

	return false
}

// SetTeamId gets a reference to the given string and assigns it to the TeamId field.
func (o *TeamInfoResponse) SetTeamId(v string) {
	o.TeamId = &v
}

// GetTeamParent returns the TeamParent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TeamInfoResponse) GetTeamParent() TeamParentResponse {
	if o == nil || o.TeamParent.Get() == nil {
		var ret TeamParentResponse
		return ret
	}
	return *o.TeamParent.Get()
}

// GetTeamParentOk returns a tuple with the TeamParent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TeamInfoResponse) GetTeamParentOk() (*TeamParentResponse, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TeamParent.Get(), o.TeamParent.IsSet()
}

// HasTeamParent returns a boolean if a field has been set.
func (o *TeamInfoResponse) HasTeamParent() bool {
	if o != nil && o.TeamParent.IsSet() {
		return true
	}

	return false
}

// SetTeamParent gets a reference to the given NullableTeamParentResponse and assigns it to the TeamParent field.
func (o *TeamInfoResponse) SetTeamParent(v TeamParentResponse) {
	o.TeamParent.Set(&v)
}
// SetTeamParentNil sets the value for TeamParent to be an explicit nil
func (o *TeamInfoResponse) SetTeamParentNil() {
	o.TeamParent.Set(nil)
}

// UnsetTeamParent ensures that no value is present for TeamParent, not even an explicit nil
func (o *TeamInfoResponse) UnsetTeamParent() {
	o.TeamParent.Unset()
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TeamInfoResponse) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamInfoResponse) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TeamInfoResponse) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TeamInfoResponse) SetName(v string) {
	o.Name = &v
}

// GetNumMembers returns the NumMembers field value if set, zero value otherwise.
func (o *TeamInfoResponse) GetNumMembers() int32 {
	if o == nil || o.NumMembers == nil {
		var ret int32
		return ret
	}
	return *o.NumMembers
}

// GetNumMembersOk returns a tuple with the NumMembers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamInfoResponse) GetNumMembersOk() (*int32, bool) {
	if o == nil || o.NumMembers == nil {
		return nil, false
	}
	return o.NumMembers, true
}

// HasNumMembers returns a boolean if a field has been set.
func (o *TeamInfoResponse) HasNumMembers() bool {
	if o != nil && o.NumMembers != nil {
		return true
	}

	return false
}

// SetNumMembers gets a reference to the given int32 and assigns it to the NumMembers field.
func (o *TeamInfoResponse) SetNumMembers(v int32) {
	o.NumMembers = &v
}

// GetNumSubTeams returns the NumSubTeams field value if set, zero value otherwise.
func (o *TeamInfoResponse) GetNumSubTeams() int32 {
	if o == nil || o.NumSubTeams == nil {
		var ret int32
		return ret
	}
	return *o.NumSubTeams
}

// GetNumSubTeamsOk returns a tuple with the NumSubTeams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamInfoResponse) GetNumSubTeamsOk() (*int32, bool) {
	if o == nil || o.NumSubTeams == nil {
		return nil, false
	}
	return o.NumSubTeams, true
}

// HasNumSubTeams returns a boolean if a field has been set.
func (o *TeamInfoResponse) HasNumSubTeams() bool {
	if o != nil && o.NumSubTeams != nil {
		return true
	}

	return false
}

// SetNumSubTeams gets a reference to the given int32 and assigns it to the NumSubTeams field.
func (o *TeamInfoResponse) SetNumSubTeams(v int32) {
	o.NumSubTeams = &v
}

func (o TeamInfoResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TeamId != nil {
		toSerialize["team_id"] = o.TeamId
	}
	if o.TeamParent.IsSet() {
		toSerialize["team_parent"] = o.TeamParent.Get()
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.NumMembers != nil {
		toSerialize["num_members"] = o.NumMembers
	}
	if o.NumSubTeams != nil {
		toSerialize["num_sub_teams"] = o.NumSubTeams
	}
	return json.Marshal(toSerialize)
}

type NullableTeamInfoResponse struct {
	value *TeamInfoResponse
	isSet bool
}

func (v NullableTeamInfoResponse) Get() *TeamInfoResponse {
	return v.value
}

func (v *NullableTeamInfoResponse) Set(val *TeamInfoResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTeamInfoResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTeamInfoResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeamInfoResponse(val *TeamInfoResponse) *NullableTeamInfoResponse {
	return &NullableTeamInfoResponse{value: val, isSet: true}
}

func (v NullableTeamInfoResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeamInfoResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


