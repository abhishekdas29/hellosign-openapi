/*
Dropbox Sign API

Dropbox Sign v3 API

API version: 3.0.0
Contact: apisupport@hellosign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dropboxsign

import (
	"encoding/json"
)

// SubEditorOptions This allows the requester to specify editor options when a preparing a document
type SubEditorOptions struct {
	// Allows requesters to edit the list of signers
	AllowEditSigners *bool `json:"allow_edit_signers,omitempty"`
	// Allows requesters to edit documents, including delete and add
	AllowEditDocuments *bool `json:"allow_edit_documents,omitempty"`
}

// NewSubEditorOptions instantiates a new SubEditorOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubEditorOptions() *SubEditorOptions {
	this := SubEditorOptions{}
	var allowEditSigners bool = false
	this.AllowEditSigners = &allowEditSigners
	var allowEditDocuments bool = false
	this.AllowEditDocuments = &allowEditDocuments
	return &this
}

// NewSubEditorOptionsWithDefaults instantiates a new SubEditorOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubEditorOptionsWithDefaults() *SubEditorOptions {
	this := SubEditorOptions{}
	var allowEditSigners bool = false
	this.AllowEditSigners = &allowEditSigners
	var allowEditDocuments bool = false
	this.AllowEditDocuments = &allowEditDocuments
	return &this
}

// GetAllowEditSigners returns the AllowEditSigners field value if set, zero value otherwise.
func (o *SubEditorOptions) GetAllowEditSigners() bool {
	if o == nil || o.AllowEditSigners == nil {
		var ret bool
		return ret
	}
	return *o.AllowEditSigners
}

// GetAllowEditSignersOk returns a tuple with the AllowEditSigners field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubEditorOptions) GetAllowEditSignersOk() (*bool, bool) {
	if o == nil || o.AllowEditSigners == nil {
		return nil, false
	}
	return o.AllowEditSigners, true
}

// HasAllowEditSigners returns a boolean if a field has been set.
func (o *SubEditorOptions) HasAllowEditSigners() bool {
	if o != nil && o.AllowEditSigners != nil {
		return true
	}

	return false
}

// SetAllowEditSigners gets a reference to the given bool and assigns it to the AllowEditSigners field.
func (o *SubEditorOptions) SetAllowEditSigners(v bool) {
	o.AllowEditSigners = &v
}

// GetAllowEditDocuments returns the AllowEditDocuments field value if set, zero value otherwise.
func (o *SubEditorOptions) GetAllowEditDocuments() bool {
	if o == nil || o.AllowEditDocuments == nil {
		var ret bool
		return ret
	}
	return *o.AllowEditDocuments
}

// GetAllowEditDocumentsOk returns a tuple with the AllowEditDocuments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubEditorOptions) GetAllowEditDocumentsOk() (*bool, bool) {
	if o == nil || o.AllowEditDocuments == nil {
		return nil, false
	}
	return o.AllowEditDocuments, true
}

// HasAllowEditDocuments returns a boolean if a field has been set.
func (o *SubEditorOptions) HasAllowEditDocuments() bool {
	if o != nil && o.AllowEditDocuments != nil {
		return true
	}

	return false
}

// SetAllowEditDocuments gets a reference to the given bool and assigns it to the AllowEditDocuments field.
func (o *SubEditorOptions) SetAllowEditDocuments(v bool) {
	o.AllowEditDocuments = &v
}

func (o SubEditorOptions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AllowEditSigners != nil {
		toSerialize["allow_edit_signers"] = o.AllowEditSigners
	}
	if o.AllowEditDocuments != nil {
		toSerialize["allow_edit_documents"] = o.AllowEditDocuments
	}
	return json.Marshal(toSerialize)
}

type NullableSubEditorOptions struct {
	value *SubEditorOptions
	isSet bool
}

func (v NullableSubEditorOptions) Get() *SubEditorOptions {
	return v.value
}

func (v *NullableSubEditorOptions) Set(val *SubEditorOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableSubEditorOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableSubEditorOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubEditorOptions(val *SubEditorOptions) *NullableSubEditorOptions {
	return &NullableSubEditorOptions{value: val, isSet: true}
}

func (v NullableSubEditorOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubEditorOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


