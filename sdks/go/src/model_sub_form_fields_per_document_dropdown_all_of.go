/*
Dropbox Sign API

Dropbox Sign v3 API

API version: 3.0.0
Contact: apisupport@hellosign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dropboxsign

import (
	"encoding/json"
)

// SubFormFieldsPerDocumentDropdownAllOf struct for SubFormFieldsPerDocumentDropdownAllOf
type SubFormFieldsPerDocumentDropdownAllOf struct {
	// An input field for dropdowns. Use the `SubFormFieldsPerDocumentDropdown` class.
	Type string `json:"type"`
	// Array of string values representing dropdown values.
	Options []string `json:"options"`
	// Selected value in `options` array. Value must exist in array.
	Content *string `json:"content,omitempty"`
	// Font family for the field.
	FontFamily *string `json:"font_family,omitempty"`
	// The initial px font size for the field contents. Can be any integer value between `7` and `49`.  **NOTE**: Font size may be reduced during processing in order to fit the contents within the dimensions of the field.
	FontSize *int32 `json:"font_size,omitempty"`
}

// NewSubFormFieldsPerDocumentDropdownAllOf instantiates a new SubFormFieldsPerDocumentDropdownAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubFormFieldsPerDocumentDropdownAllOf(type_ string, options []string) *SubFormFieldsPerDocumentDropdownAllOf {
	this := SubFormFieldsPerDocumentDropdownAllOf{}
	this.Type = type_
	this.Options = options
	return &this
}

// NewSubFormFieldsPerDocumentDropdownAllOfWithDefaults instantiates a new SubFormFieldsPerDocumentDropdownAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubFormFieldsPerDocumentDropdownAllOfWithDefaults() *SubFormFieldsPerDocumentDropdownAllOf {
	this := SubFormFieldsPerDocumentDropdownAllOf{}
	var type_ string = "dropdown"
	this.Type = type_
	return &this
}

// GetType returns the Type field value
func (o *SubFormFieldsPerDocumentDropdownAllOf) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SubFormFieldsPerDocumentDropdownAllOf) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SubFormFieldsPerDocumentDropdownAllOf) SetType(v string) {
	o.Type = v
}

// GetOptions returns the Options field value
func (o *SubFormFieldsPerDocumentDropdownAllOf) GetOptions() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value
// and a boolean to check if the value has been set.
func (o *SubFormFieldsPerDocumentDropdownAllOf) GetOptionsOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Options, true
}

// SetOptions sets field value
func (o *SubFormFieldsPerDocumentDropdownAllOf) SetOptions(v []string) {
	o.Options = v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *SubFormFieldsPerDocumentDropdownAllOf) GetContent() string {
	if o == nil || o.Content == nil {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubFormFieldsPerDocumentDropdownAllOf) GetContentOk() (*string, bool) {
	if o == nil || o.Content == nil {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *SubFormFieldsPerDocumentDropdownAllOf) HasContent() bool {
	if o != nil && o.Content != nil {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *SubFormFieldsPerDocumentDropdownAllOf) SetContent(v string) {
	o.Content = &v
}

// GetFontFamily returns the FontFamily field value if set, zero value otherwise.
func (o *SubFormFieldsPerDocumentDropdownAllOf) GetFontFamily() string {
	if o == nil || o.FontFamily == nil {
		var ret string
		return ret
	}
	return *o.FontFamily
}

// GetFontFamilyOk returns a tuple with the FontFamily field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubFormFieldsPerDocumentDropdownAllOf) GetFontFamilyOk() (*string, bool) {
	if o == nil || o.FontFamily == nil {
		return nil, false
	}
	return o.FontFamily, true
}

// HasFontFamily returns a boolean if a field has been set.
func (o *SubFormFieldsPerDocumentDropdownAllOf) HasFontFamily() bool {
	if o != nil && o.FontFamily != nil {
		return true
	}

	return false
}

// SetFontFamily gets a reference to the given string and assigns it to the FontFamily field.
func (o *SubFormFieldsPerDocumentDropdownAllOf) SetFontFamily(v string) {
	o.FontFamily = &v
}

// GetFontSize returns the FontSize field value if set, zero value otherwise.
func (o *SubFormFieldsPerDocumentDropdownAllOf) GetFontSize() int32 {
	if o == nil || o.FontSize == nil {
		var ret int32
		return ret
	}
	return *o.FontSize
}

// GetFontSizeOk returns a tuple with the FontSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubFormFieldsPerDocumentDropdownAllOf) GetFontSizeOk() (*int32, bool) {
	if o == nil || o.FontSize == nil {
		return nil, false
	}
	return o.FontSize, true
}

// HasFontSize returns a boolean if a field has been set.
func (o *SubFormFieldsPerDocumentDropdownAllOf) HasFontSize() bool {
	if o != nil && o.FontSize != nil {
		return true
	}

	return false
}

// SetFontSize gets a reference to the given int32 and assigns it to the FontSize field.
func (o *SubFormFieldsPerDocumentDropdownAllOf) SetFontSize(v int32) {
	o.FontSize = &v
}

func (o SubFormFieldsPerDocumentDropdownAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["options"] = o.Options
	}
	if o.Content != nil {
		toSerialize["content"] = o.Content
	}
	if o.FontFamily != nil {
		toSerialize["font_family"] = o.FontFamily
	}
	if o.FontSize != nil {
		toSerialize["font_size"] = o.FontSize
	}
	return json.Marshal(toSerialize)
}

type NullableSubFormFieldsPerDocumentDropdownAllOf struct {
	value *SubFormFieldsPerDocumentDropdownAllOf
	isSet bool
}

func (v NullableSubFormFieldsPerDocumentDropdownAllOf) Get() *SubFormFieldsPerDocumentDropdownAllOf {
	return v.value
}

func (v *NullableSubFormFieldsPerDocumentDropdownAllOf) Set(val *SubFormFieldsPerDocumentDropdownAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableSubFormFieldsPerDocumentDropdownAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableSubFormFieldsPerDocumentDropdownAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubFormFieldsPerDocumentDropdownAllOf(val *SubFormFieldsPerDocumentDropdownAllOf) *NullableSubFormFieldsPerDocumentDropdownAllOf {
	return &NullableSubFormFieldsPerDocumentDropdownAllOf{value: val, isSet: true}
}

func (v NullableSubFormFieldsPerDocumentDropdownAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubFormFieldsPerDocumentDropdownAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


