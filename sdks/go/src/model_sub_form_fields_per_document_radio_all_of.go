/*
Dropbox Sign API

Dropbox Sign v3 API

API version: 3.0.0
Contact: apisupport@hellosign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dropboxsign

import (
	"encoding/json"
)

// SubFormFieldsPerDocumentRadioAllOf struct for SubFormFieldsPerDocumentRadioAllOf
type SubFormFieldsPerDocumentRadioAllOf struct {
	// An input field for radios. Use the `SubFormFieldsPerDocumentRadio` class.
	Type string `json:"type"`
	// String referencing group defined in `form_field_groups` parameter.
	Group string `json:"group"`
	// `true` for checking the radio field by default, otherwise `false`. Only one radio field per group can be `true`.
	IsChecked bool `json:"is_checked"`
}

// NewSubFormFieldsPerDocumentRadioAllOf instantiates a new SubFormFieldsPerDocumentRadioAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubFormFieldsPerDocumentRadioAllOf(type_ string, group string, isChecked bool) *SubFormFieldsPerDocumentRadioAllOf {
	this := SubFormFieldsPerDocumentRadioAllOf{}
	this.Type = type_
	this.Group = group
	this.IsChecked = isChecked
	return &this
}

// NewSubFormFieldsPerDocumentRadioAllOfWithDefaults instantiates a new SubFormFieldsPerDocumentRadioAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubFormFieldsPerDocumentRadioAllOfWithDefaults() *SubFormFieldsPerDocumentRadioAllOf {
	this := SubFormFieldsPerDocumentRadioAllOf{}
	var type_ string = "radio"
	this.Type = type_
	return &this
}

// GetType returns the Type field value
func (o *SubFormFieldsPerDocumentRadioAllOf) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SubFormFieldsPerDocumentRadioAllOf) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SubFormFieldsPerDocumentRadioAllOf) SetType(v string) {
	o.Type = v
}

// GetGroup returns the Group field value
func (o *SubFormFieldsPerDocumentRadioAllOf) GetGroup() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Group
}

// GetGroupOk returns a tuple with the Group field value
// and a boolean to check if the value has been set.
func (o *SubFormFieldsPerDocumentRadioAllOf) GetGroupOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Group, true
}

// SetGroup sets field value
func (o *SubFormFieldsPerDocumentRadioAllOf) SetGroup(v string) {
	o.Group = v
}

// GetIsChecked returns the IsChecked field value
func (o *SubFormFieldsPerDocumentRadioAllOf) GetIsChecked() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsChecked
}

// GetIsCheckedOk returns a tuple with the IsChecked field value
// and a boolean to check if the value has been set.
func (o *SubFormFieldsPerDocumentRadioAllOf) GetIsCheckedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.IsChecked, true
}

// SetIsChecked sets field value
func (o *SubFormFieldsPerDocumentRadioAllOf) SetIsChecked(v bool) {
	o.IsChecked = v
}

func (o SubFormFieldsPerDocumentRadioAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["group"] = o.Group
	}
	if true {
		toSerialize["is_checked"] = o.IsChecked
	}
	return json.Marshal(toSerialize)
}

type NullableSubFormFieldsPerDocumentRadioAllOf struct {
	value *SubFormFieldsPerDocumentRadioAllOf
	isSet bool
}

func (v NullableSubFormFieldsPerDocumentRadioAllOf) Get() *SubFormFieldsPerDocumentRadioAllOf {
	return v.value
}

func (v *NullableSubFormFieldsPerDocumentRadioAllOf) Set(val *SubFormFieldsPerDocumentRadioAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableSubFormFieldsPerDocumentRadioAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableSubFormFieldsPerDocumentRadioAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubFormFieldsPerDocumentRadioAllOf(val *SubFormFieldsPerDocumentRadioAllOf) *NullableSubFormFieldsPerDocumentRadioAllOf {
	return &NullableSubFormFieldsPerDocumentRadioAllOf{value: val, isSet: true}
}

func (v NullableSubFormFieldsPerDocumentRadioAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubFormFieldsPerDocumentRadioAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


