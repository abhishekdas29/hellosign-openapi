/*
Dropbox Sign API

Dropbox Sign v3 API

API version: 3.0.0
Contact: apisupport@hellosign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dropboxsign

import (
	"encoding/json"
)

// ReportResponse Contains information about the report request.
type ReportResponse struct {
	// A message indicating the requested operation's success
	Success *string `json:"success,omitempty"`
	// The (inclusive) start date for the report data in MM/DD/YYYY format.
	StartDate *string `json:"start_date,omitempty"`
	// The (inclusive) end date for the report data in MM/DD/YYYY format.
	EndDate *string `json:"end_date,omitempty"`
	// The type(s) of the report you are requesting. Allowed values are \"user_activity\" and \"document_status\". User activity reports contain list of all users and their activity during the specified date range. Document status report contain a list of signature requests created in the specified time range (and their status).
	ReportType *[]string `json:"report_type,omitempty"`
}

// NewReportResponse instantiates a new ReportResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReportResponse() *ReportResponse {
	this := ReportResponse{}
	return &this
}

// NewReportResponseWithDefaults instantiates a new ReportResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReportResponseWithDefaults() *ReportResponse {
	this := ReportResponse{}
	return &this
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *ReportResponse) GetSuccess() string {
	if o == nil || o.Success == nil {
		var ret string
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportResponse) GetSuccessOk() (*string, bool) {
	if o == nil || o.Success == nil {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *ReportResponse) HasSuccess() bool {
	if o != nil && o.Success != nil {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given string and assigns it to the Success field.
func (o *ReportResponse) SetSuccess(v string) {
	o.Success = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *ReportResponse) GetStartDate() string {
	if o == nil || o.StartDate == nil {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportResponse) GetStartDateOk() (*string, bool) {
	if o == nil || o.StartDate == nil {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *ReportResponse) HasStartDate() bool {
	if o != nil && o.StartDate != nil {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *ReportResponse) SetStartDate(v string) {
	o.StartDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *ReportResponse) GetEndDate() string {
	if o == nil || o.EndDate == nil {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportResponse) GetEndDateOk() (*string, bool) {
	if o == nil || o.EndDate == nil {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *ReportResponse) HasEndDate() bool {
	if o != nil && o.EndDate != nil {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *ReportResponse) SetEndDate(v string) {
	o.EndDate = &v
}

// GetReportType returns the ReportType field value if set, zero value otherwise.
func (o *ReportResponse) GetReportType() []string {
	if o == nil || o.ReportType == nil {
		var ret []string
		return ret
	}
	return *o.ReportType
}

// GetReportTypeOk returns a tuple with the ReportType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportResponse) GetReportTypeOk() (*[]string, bool) {
	if o == nil || o.ReportType == nil {
		return nil, false
	}
	return o.ReportType, true
}

// HasReportType returns a boolean if a field has been set.
func (o *ReportResponse) HasReportType() bool {
	if o != nil && o.ReportType != nil {
		return true
	}

	return false
}

// SetReportType gets a reference to the given []string and assigns it to the ReportType field.
func (o *ReportResponse) SetReportType(v []string) {
	o.ReportType = &v
}

func (o ReportResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Success != nil {
		toSerialize["success"] = o.Success
	}
	if o.StartDate != nil {
		toSerialize["start_date"] = o.StartDate
	}
	if o.EndDate != nil {
		toSerialize["end_date"] = o.EndDate
	}
	if o.ReportType != nil {
		toSerialize["report_type"] = o.ReportType
	}
	return json.Marshal(toSerialize)
}

type NullableReportResponse struct {
	value *ReportResponse
	isSet bool
}

func (v NullableReportResponse) Get() *ReportResponse {
	return v.value
}

func (v *NullableReportResponse) Set(val *ReportResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableReportResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableReportResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportResponse(val *ReportResponse) *NullableReportResponse {
	return &NullableReportResponse{value: val, isSet: true}
}

func (v NullableReportResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


