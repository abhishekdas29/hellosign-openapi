/*
Dropbox Sign API

Dropbox Sign v3 API

API version: 3.0.0
Contact: apisupport@hellosign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dropboxsign

import (
	"encoding/json"
)

// SubFormFieldsPerDocumentCheckboxAllOf struct for SubFormFieldsPerDocumentCheckboxAllOf
type SubFormFieldsPerDocumentCheckboxAllOf struct {
	// A yes/no checkbox. Use the `SubFormFieldsPerDocumentCheckbox` class.
	Type string `json:"type"`
	// `true` for checking the checkbox field by default, otherwise `false`.
	IsChecked bool `json:"is_checked"`
	// String referencing group defined in `form_field_groups` parameter.
	Group *string `json:"group,omitempty"`
}

// NewSubFormFieldsPerDocumentCheckboxAllOf instantiates a new SubFormFieldsPerDocumentCheckboxAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubFormFieldsPerDocumentCheckboxAllOf(type_ string, isChecked bool) *SubFormFieldsPerDocumentCheckboxAllOf {
	this := SubFormFieldsPerDocumentCheckboxAllOf{}
	this.Type = type_
	this.IsChecked = isChecked
	return &this
}

// NewSubFormFieldsPerDocumentCheckboxAllOfWithDefaults instantiates a new SubFormFieldsPerDocumentCheckboxAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubFormFieldsPerDocumentCheckboxAllOfWithDefaults() *SubFormFieldsPerDocumentCheckboxAllOf {
	this := SubFormFieldsPerDocumentCheckboxAllOf{}
	var type_ string = "checkbox"
	this.Type = type_
	return &this
}

// GetType returns the Type field value
func (o *SubFormFieldsPerDocumentCheckboxAllOf) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SubFormFieldsPerDocumentCheckboxAllOf) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SubFormFieldsPerDocumentCheckboxAllOf) SetType(v string) {
	o.Type = v
}

// GetIsChecked returns the IsChecked field value
func (o *SubFormFieldsPerDocumentCheckboxAllOf) GetIsChecked() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsChecked
}

// GetIsCheckedOk returns a tuple with the IsChecked field value
// and a boolean to check if the value has been set.
func (o *SubFormFieldsPerDocumentCheckboxAllOf) GetIsCheckedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.IsChecked, true
}

// SetIsChecked sets field value
func (o *SubFormFieldsPerDocumentCheckboxAllOf) SetIsChecked(v bool) {
	o.IsChecked = v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *SubFormFieldsPerDocumentCheckboxAllOf) GetGroup() string {
	if o == nil || o.Group == nil {
		var ret string
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubFormFieldsPerDocumentCheckboxAllOf) GetGroupOk() (*string, bool) {
	if o == nil || o.Group == nil {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *SubFormFieldsPerDocumentCheckboxAllOf) HasGroup() bool {
	if o != nil && o.Group != nil {
		return true
	}

	return false
}

// SetGroup gets a reference to the given string and assigns it to the Group field.
func (o *SubFormFieldsPerDocumentCheckboxAllOf) SetGroup(v string) {
	o.Group = &v
}

func (o SubFormFieldsPerDocumentCheckboxAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["is_checked"] = o.IsChecked
	}
	if o.Group != nil {
		toSerialize["group"] = o.Group
	}
	return json.Marshal(toSerialize)
}

type NullableSubFormFieldsPerDocumentCheckboxAllOf struct {
	value *SubFormFieldsPerDocumentCheckboxAllOf
	isSet bool
}

func (v NullableSubFormFieldsPerDocumentCheckboxAllOf) Get() *SubFormFieldsPerDocumentCheckboxAllOf {
	return v.value
}

func (v *NullableSubFormFieldsPerDocumentCheckboxAllOf) Set(val *SubFormFieldsPerDocumentCheckboxAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableSubFormFieldsPerDocumentCheckboxAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableSubFormFieldsPerDocumentCheckboxAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubFormFieldsPerDocumentCheckboxAllOf(val *SubFormFieldsPerDocumentCheckboxAllOf) *NullableSubFormFieldsPerDocumentCheckboxAllOf {
	return &NullableSubFormFieldsPerDocumentCheckboxAllOf{value: val, isSet: true}
}

func (v NullableSubFormFieldsPerDocumentCheckboxAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubFormFieldsPerDocumentCheckboxAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


