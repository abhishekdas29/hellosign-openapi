/*
Dropbox Sign API

Dropbox Sign v3 API

API version: 3.0.0
Contact: apisupport@hellosign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dropboxsign

import (
	"encoding/json"
)

// SubFormFieldsPerDocumentTextAllOf struct for SubFormFieldsPerDocumentTextAllOf
type SubFormFieldsPerDocumentTextAllOf struct {
	// A text input field. Use the `SubFormFieldsPerDocumentText` class.
	Type string `json:"type"`
	// Placeholder value for text field.
	Placeholder *string `json:"placeholder,omitempty"`
	// Auto fill type for populating fields automatically. Check out the list of [auto fill types](/api/reference/constants/#auto-fill-types) to learn more about the possible values.
	AutoFillType *string `json:"auto_fill_type,omitempty"`
	// Link two or more text fields. Enter data into one linked text field, which automatically fill all other linked text fields.
	LinkId *string `json:"link_id,omitempty"`
	// Masks entered data. For more information see [Masking sensitive information](https://faq.hellosign.com/hc/en-us/articles/360040742811-Masking-sensitive-information). `true` for masking the data in a text field, otherwise `false`.
	Masked *bool `json:"masked,omitempty"`
	// Each text field may contain a `validation_type` parameter. Check out the list of [validation types](https://faq.hellosign.com/hc/en-us/articles/217115577) to learn more about the possible values.  **NOTE**: When using `custom_regex` you are required to pass a second parameter `validation_custom_regex` and you can optionally provide `validation_custom_regex_format_label` for the error message the user will see in case of an invalid value.
	ValidationType *string `json:"validation_type,omitempty"`
	ValidationCustomRegex *string `json:"validation_custom_regex,omitempty"`
	ValidationCustomRegexFormatLabel *string `json:"validation_custom_regex_format_label,omitempty"`
	// Content of a `me_now` text field
	Content *string `json:"content,omitempty"`
	// Font family for the field.
	FontFamily *string `json:"font_family,omitempty"`
	// The initial px font size for the field contents. Can be any integer value between `7` and `49`.  **NOTE**: Font size may be reduced during processing in order to fit the contents within the dimensions of the field.
	FontSize *int32 `json:"font_size,omitempty"`
}

// NewSubFormFieldsPerDocumentTextAllOf instantiates a new SubFormFieldsPerDocumentTextAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubFormFieldsPerDocumentTextAllOf(type_ string) *SubFormFieldsPerDocumentTextAllOf {
	this := SubFormFieldsPerDocumentTextAllOf{}
	this.Type = type_
	return &this
}

// NewSubFormFieldsPerDocumentTextAllOfWithDefaults instantiates a new SubFormFieldsPerDocumentTextAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubFormFieldsPerDocumentTextAllOfWithDefaults() *SubFormFieldsPerDocumentTextAllOf {
	this := SubFormFieldsPerDocumentTextAllOf{}
	var type_ string = "text"
	this.Type = type_
	return &this
}

// GetType returns the Type field value
func (o *SubFormFieldsPerDocumentTextAllOf) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SubFormFieldsPerDocumentTextAllOf) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SubFormFieldsPerDocumentTextAllOf) SetType(v string) {
	o.Type = v
}

// GetPlaceholder returns the Placeholder field value if set, zero value otherwise.
func (o *SubFormFieldsPerDocumentTextAllOf) GetPlaceholder() string {
	if o == nil || o.Placeholder == nil {
		var ret string
		return ret
	}
	return *o.Placeholder
}

// GetPlaceholderOk returns a tuple with the Placeholder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubFormFieldsPerDocumentTextAllOf) GetPlaceholderOk() (*string, bool) {
	if o == nil || o.Placeholder == nil {
		return nil, false
	}
	return o.Placeholder, true
}

// HasPlaceholder returns a boolean if a field has been set.
func (o *SubFormFieldsPerDocumentTextAllOf) HasPlaceholder() bool {
	if o != nil && o.Placeholder != nil {
		return true
	}

	return false
}

// SetPlaceholder gets a reference to the given string and assigns it to the Placeholder field.
func (o *SubFormFieldsPerDocumentTextAllOf) SetPlaceholder(v string) {
	o.Placeholder = &v
}

// GetAutoFillType returns the AutoFillType field value if set, zero value otherwise.
func (o *SubFormFieldsPerDocumentTextAllOf) GetAutoFillType() string {
	if o == nil || o.AutoFillType == nil {
		var ret string
		return ret
	}
	return *o.AutoFillType
}

// GetAutoFillTypeOk returns a tuple with the AutoFillType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubFormFieldsPerDocumentTextAllOf) GetAutoFillTypeOk() (*string, bool) {
	if o == nil || o.AutoFillType == nil {
		return nil, false
	}
	return o.AutoFillType, true
}

// HasAutoFillType returns a boolean if a field has been set.
func (o *SubFormFieldsPerDocumentTextAllOf) HasAutoFillType() bool {
	if o != nil && o.AutoFillType != nil {
		return true
	}

	return false
}

// SetAutoFillType gets a reference to the given string and assigns it to the AutoFillType field.
func (o *SubFormFieldsPerDocumentTextAllOf) SetAutoFillType(v string) {
	o.AutoFillType = &v
}

// GetLinkId returns the LinkId field value if set, zero value otherwise.
func (o *SubFormFieldsPerDocumentTextAllOf) GetLinkId() string {
	if o == nil || o.LinkId == nil {
		var ret string
		return ret
	}
	return *o.LinkId
}

// GetLinkIdOk returns a tuple with the LinkId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubFormFieldsPerDocumentTextAllOf) GetLinkIdOk() (*string, bool) {
	if o == nil || o.LinkId == nil {
		return nil, false
	}
	return o.LinkId, true
}

// HasLinkId returns a boolean if a field has been set.
func (o *SubFormFieldsPerDocumentTextAllOf) HasLinkId() bool {
	if o != nil && o.LinkId != nil {
		return true
	}

	return false
}

// SetLinkId gets a reference to the given string and assigns it to the LinkId field.
func (o *SubFormFieldsPerDocumentTextAllOf) SetLinkId(v string) {
	o.LinkId = &v
}

// GetMasked returns the Masked field value if set, zero value otherwise.
func (o *SubFormFieldsPerDocumentTextAllOf) GetMasked() bool {
	if o == nil || o.Masked == nil {
		var ret bool
		return ret
	}
	return *o.Masked
}

// GetMaskedOk returns a tuple with the Masked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubFormFieldsPerDocumentTextAllOf) GetMaskedOk() (*bool, bool) {
	if o == nil || o.Masked == nil {
		return nil, false
	}
	return o.Masked, true
}

// HasMasked returns a boolean if a field has been set.
func (o *SubFormFieldsPerDocumentTextAllOf) HasMasked() bool {
	if o != nil && o.Masked != nil {
		return true
	}

	return false
}

// SetMasked gets a reference to the given bool and assigns it to the Masked field.
func (o *SubFormFieldsPerDocumentTextAllOf) SetMasked(v bool) {
	o.Masked = &v
}

// GetValidationType returns the ValidationType field value if set, zero value otherwise.
func (o *SubFormFieldsPerDocumentTextAllOf) GetValidationType() string {
	if o == nil || o.ValidationType == nil {
		var ret string
		return ret
	}
	return *o.ValidationType
}

// GetValidationTypeOk returns a tuple with the ValidationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubFormFieldsPerDocumentTextAllOf) GetValidationTypeOk() (*string, bool) {
	if o == nil || o.ValidationType == nil {
		return nil, false
	}
	return o.ValidationType, true
}

// HasValidationType returns a boolean if a field has been set.
func (o *SubFormFieldsPerDocumentTextAllOf) HasValidationType() bool {
	if o != nil && o.ValidationType != nil {
		return true
	}

	return false
}

// SetValidationType gets a reference to the given string and assigns it to the ValidationType field.
func (o *SubFormFieldsPerDocumentTextAllOf) SetValidationType(v string) {
	o.ValidationType = &v
}

// GetValidationCustomRegex returns the ValidationCustomRegex field value if set, zero value otherwise.
func (o *SubFormFieldsPerDocumentTextAllOf) GetValidationCustomRegex() string {
	if o == nil || o.ValidationCustomRegex == nil {
		var ret string
		return ret
	}
	return *o.ValidationCustomRegex
}

// GetValidationCustomRegexOk returns a tuple with the ValidationCustomRegex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubFormFieldsPerDocumentTextAllOf) GetValidationCustomRegexOk() (*string, bool) {
	if o == nil || o.ValidationCustomRegex == nil {
		return nil, false
	}
	return o.ValidationCustomRegex, true
}

// HasValidationCustomRegex returns a boolean if a field has been set.
func (o *SubFormFieldsPerDocumentTextAllOf) HasValidationCustomRegex() bool {
	if o != nil && o.ValidationCustomRegex != nil {
		return true
	}

	return false
}

// SetValidationCustomRegex gets a reference to the given string and assigns it to the ValidationCustomRegex field.
func (o *SubFormFieldsPerDocumentTextAllOf) SetValidationCustomRegex(v string) {
	o.ValidationCustomRegex = &v
}

// GetValidationCustomRegexFormatLabel returns the ValidationCustomRegexFormatLabel field value if set, zero value otherwise.
func (o *SubFormFieldsPerDocumentTextAllOf) GetValidationCustomRegexFormatLabel() string {
	if o == nil || o.ValidationCustomRegexFormatLabel == nil {
		var ret string
		return ret
	}
	return *o.ValidationCustomRegexFormatLabel
}

// GetValidationCustomRegexFormatLabelOk returns a tuple with the ValidationCustomRegexFormatLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubFormFieldsPerDocumentTextAllOf) GetValidationCustomRegexFormatLabelOk() (*string, bool) {
	if o == nil || o.ValidationCustomRegexFormatLabel == nil {
		return nil, false
	}
	return o.ValidationCustomRegexFormatLabel, true
}

// HasValidationCustomRegexFormatLabel returns a boolean if a field has been set.
func (o *SubFormFieldsPerDocumentTextAllOf) HasValidationCustomRegexFormatLabel() bool {
	if o != nil && o.ValidationCustomRegexFormatLabel != nil {
		return true
	}

	return false
}

// SetValidationCustomRegexFormatLabel gets a reference to the given string and assigns it to the ValidationCustomRegexFormatLabel field.
func (o *SubFormFieldsPerDocumentTextAllOf) SetValidationCustomRegexFormatLabel(v string) {
	o.ValidationCustomRegexFormatLabel = &v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *SubFormFieldsPerDocumentTextAllOf) GetContent() string {
	if o == nil || o.Content == nil {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubFormFieldsPerDocumentTextAllOf) GetContentOk() (*string, bool) {
	if o == nil || o.Content == nil {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *SubFormFieldsPerDocumentTextAllOf) HasContent() bool {
	if o != nil && o.Content != nil {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *SubFormFieldsPerDocumentTextAllOf) SetContent(v string) {
	o.Content = &v
}

// GetFontFamily returns the FontFamily field value if set, zero value otherwise.
func (o *SubFormFieldsPerDocumentTextAllOf) GetFontFamily() string {
	if o == nil || o.FontFamily == nil {
		var ret string
		return ret
	}
	return *o.FontFamily
}

// GetFontFamilyOk returns a tuple with the FontFamily field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubFormFieldsPerDocumentTextAllOf) GetFontFamilyOk() (*string, bool) {
	if o == nil || o.FontFamily == nil {
		return nil, false
	}
	return o.FontFamily, true
}

// HasFontFamily returns a boolean if a field has been set.
func (o *SubFormFieldsPerDocumentTextAllOf) HasFontFamily() bool {
	if o != nil && o.FontFamily != nil {
		return true
	}

	return false
}

// SetFontFamily gets a reference to the given string and assigns it to the FontFamily field.
func (o *SubFormFieldsPerDocumentTextAllOf) SetFontFamily(v string) {
	o.FontFamily = &v
}

// GetFontSize returns the FontSize field value if set, zero value otherwise.
func (o *SubFormFieldsPerDocumentTextAllOf) GetFontSize() int32 {
	if o == nil || o.FontSize == nil {
		var ret int32
		return ret
	}
	return *o.FontSize
}

// GetFontSizeOk returns a tuple with the FontSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubFormFieldsPerDocumentTextAllOf) GetFontSizeOk() (*int32, bool) {
	if o == nil || o.FontSize == nil {
		return nil, false
	}
	return o.FontSize, true
}

// HasFontSize returns a boolean if a field has been set.
func (o *SubFormFieldsPerDocumentTextAllOf) HasFontSize() bool {
	if o != nil && o.FontSize != nil {
		return true
	}

	return false
}

// SetFontSize gets a reference to the given int32 and assigns it to the FontSize field.
func (o *SubFormFieldsPerDocumentTextAllOf) SetFontSize(v int32) {
	o.FontSize = &v
}

func (o SubFormFieldsPerDocumentTextAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.Placeholder != nil {
		toSerialize["placeholder"] = o.Placeholder
	}
	if o.AutoFillType != nil {
		toSerialize["auto_fill_type"] = o.AutoFillType
	}
	if o.LinkId != nil {
		toSerialize["link_id"] = o.LinkId
	}
	if o.Masked != nil {
		toSerialize["masked"] = o.Masked
	}
	if o.ValidationType != nil {
		toSerialize["validation_type"] = o.ValidationType
	}
	if o.ValidationCustomRegex != nil {
		toSerialize["validation_custom_regex"] = o.ValidationCustomRegex
	}
	if o.ValidationCustomRegexFormatLabel != nil {
		toSerialize["validation_custom_regex_format_label"] = o.ValidationCustomRegexFormatLabel
	}
	if o.Content != nil {
		toSerialize["content"] = o.Content
	}
	if o.FontFamily != nil {
		toSerialize["font_family"] = o.FontFamily
	}
	if o.FontSize != nil {
		toSerialize["font_size"] = o.FontSize
	}
	return json.Marshal(toSerialize)
}

type NullableSubFormFieldsPerDocumentTextAllOf struct {
	value *SubFormFieldsPerDocumentTextAllOf
	isSet bool
}

func (v NullableSubFormFieldsPerDocumentTextAllOf) Get() *SubFormFieldsPerDocumentTextAllOf {
	return v.value
}

func (v *NullableSubFormFieldsPerDocumentTextAllOf) Set(val *SubFormFieldsPerDocumentTextAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableSubFormFieldsPerDocumentTextAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableSubFormFieldsPerDocumentTextAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubFormFieldsPerDocumentTextAllOf(val *SubFormFieldsPerDocumentTextAllOf) *NullableSubFormFieldsPerDocumentTextAllOf {
	return &NullableSubFormFieldsPerDocumentTextAllOf{value: val, isSet: true}
}

func (v NullableSubFormFieldsPerDocumentTextAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubFormFieldsPerDocumentTextAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


