/*
Dropbox Sign API

Dropbox Sign v3 API

API version: 3.0.0
Contact: apisupport@hellosign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dropboxsign

import (
	"encoding/json"
)

// TeamSubTeamsResponse struct for TeamSubTeamsResponse
type TeamSubTeamsResponse struct {
	// Contains a list with sub teams.
	SubTeams *[]SubTeamResponse `json:"sub_teams,omitempty"`
	ListInfo *ListInfoResponse `json:"list_info,omitempty"`
	Warnings *[]WarningResponse `json:"warnings,omitempty"`
}

// NewTeamSubTeamsResponse instantiates a new TeamSubTeamsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTeamSubTeamsResponse() *TeamSubTeamsResponse {
	this := TeamSubTeamsResponse{}
	return &this
}

// NewTeamSubTeamsResponseWithDefaults instantiates a new TeamSubTeamsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTeamSubTeamsResponseWithDefaults() *TeamSubTeamsResponse {
	this := TeamSubTeamsResponse{}
	return &this
}

// GetSubTeams returns the SubTeams field value if set, zero value otherwise.
func (o *TeamSubTeamsResponse) GetSubTeams() []SubTeamResponse {
	if o == nil || o.SubTeams == nil {
		var ret []SubTeamResponse
		return ret
	}
	return *o.SubTeams
}

// GetSubTeamsOk returns a tuple with the SubTeams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamSubTeamsResponse) GetSubTeamsOk() (*[]SubTeamResponse, bool) {
	if o == nil || o.SubTeams == nil {
		return nil, false
	}
	return o.SubTeams, true
}

// HasSubTeams returns a boolean if a field has been set.
func (o *TeamSubTeamsResponse) HasSubTeams() bool {
	if o != nil && o.SubTeams != nil {
		return true
	}

	return false
}

// SetSubTeams gets a reference to the given []SubTeamResponse and assigns it to the SubTeams field.
func (o *TeamSubTeamsResponse) SetSubTeams(v []SubTeamResponse) {
	o.SubTeams = &v
}

// GetListInfo returns the ListInfo field value if set, zero value otherwise.
func (o *TeamSubTeamsResponse) GetListInfo() ListInfoResponse {
	if o == nil || o.ListInfo == nil {
		var ret ListInfoResponse
		return ret
	}
	return *o.ListInfo
}

// GetListInfoOk returns a tuple with the ListInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamSubTeamsResponse) GetListInfoOk() (*ListInfoResponse, bool) {
	if o == nil || o.ListInfo == nil {
		return nil, false
	}
	return o.ListInfo, true
}

// HasListInfo returns a boolean if a field has been set.
func (o *TeamSubTeamsResponse) HasListInfo() bool {
	if o != nil && o.ListInfo != nil {
		return true
	}

	return false
}

// SetListInfo gets a reference to the given ListInfoResponse and assigns it to the ListInfo field.
func (o *TeamSubTeamsResponse) SetListInfo(v ListInfoResponse) {
	o.ListInfo = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *TeamSubTeamsResponse) GetWarnings() []WarningResponse {
	if o == nil || o.Warnings == nil {
		var ret []WarningResponse
		return ret
	}
	return *o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamSubTeamsResponse) GetWarningsOk() (*[]WarningResponse, bool) {
	if o == nil || o.Warnings == nil {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *TeamSubTeamsResponse) HasWarnings() bool {
	if o != nil && o.Warnings != nil {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningResponse and assigns it to the Warnings field.
func (o *TeamSubTeamsResponse) SetWarnings(v []WarningResponse) {
	o.Warnings = &v
}

func (o TeamSubTeamsResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SubTeams != nil {
		toSerialize["sub_teams"] = o.SubTeams
	}
	if o.ListInfo != nil {
		toSerialize["list_info"] = o.ListInfo
	}
	if o.Warnings != nil {
		toSerialize["warnings"] = o.Warnings
	}
	return json.Marshal(toSerialize)
}

type NullableTeamSubTeamsResponse struct {
	value *TeamSubTeamsResponse
	isSet bool
}

func (v NullableTeamSubTeamsResponse) Get() *TeamSubTeamsResponse {
	return v.value
}

func (v *NullableTeamSubTeamsResponse) Set(val *TeamSubTeamsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTeamSubTeamsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTeamSubTeamsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeamSubTeamsResponse(val *TeamSubTeamsResponse) *NullableTeamSubTeamsResponse {
	return &NullableTeamSubTeamsResponse{value: val, isSet: true}
}

func (v NullableTeamSubTeamsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeamSubTeamsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


